{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; // import { toggleChatBubble } from 'redux/actions/ui';\n\nimport { Avatar } from 'antd';\nimport styles from './ChatWindow.module.scss';\nimport { UserOutlined } from '@ant-design/icons'; // import Button from '@material-ui/core/Button';\n\nimport UserAvatar from 'components/UserAvatar';\nimport _ from 'lodash';\nimport moment from 'moment'; // @ts-ignore\n\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\nimport GoogleLogin from 'react-google-login';\nimport InputEmoji from 'components/EmojiInput';\nimport { loginByGoogle, loginByFacebook } from 'redux/actions/users';\nimport { connect } from 'react-redux';\nimport { message } from 'antd';\n\nfunction ChatWindow(_ref) {\n  _s();\n\n  var messages = _ref.messages,\n      handleSendMessage = _ref.handleSendMessage,\n      handleCloseChat = _ref.handleCloseChat,\n      user = _ref.user,\n      isAdmin = _ref.isAdmin,\n      isOnline = _ref.isOnline,\n      roomInfo = _ref.roomInfo,\n      handleClick = _ref.handleClick,\n      loginByGoogle = _ref.loginByGoogle,\n      loginByGoogleError = _ref.loginByGoogleError,\n      loginByFacebookError = _ref.loginByFacebookError,\n      loginByFacebook = _ref.loginByFacebook;\n  // @ts-ignore\n  var lastSeenIndex;\n\n  if (isAdmin && messages.length) {\n    if (messages[messages.length - 1].sender === 'Admin') {\n      // @ts-ignore\n      lastSeenIndex = _.findLastIndex(messages, function (message) {\n        return message.seen && message.sender === 'Admin';\n      });\n    }\n  } else if (!isAdmin && messages.length) {\n    if (messages[messages.length - 1].sender !== 'Admin') {\n      // @ts-ignore\n      lastSeenIndex = _.findLastIndex(messages, function (message) {\n        return message.seen && message.sender !== 'Admin';\n      });\n    }\n  }\n\n  var renderTime = function renderTime(i) {\n    if (i !== 0) {\n      if (messages[i].createdAt - messages[i - 1].createdAt > 120000) {\n        return __jsx(\"div\", {\n          className: styles.time\n        }, moment(messages[i].createdAt).locale('vi').startOf('minute').fromNow());\n      }\n    } else {\n      return __jsx(\"div\", {\n        className: styles.time\n      }, moment(messages[i].createdAt).locale('vi').startOf('minute').fromNow());\n    }\n  };\n\n  var responseGoogle = function responseGoogle(data) {\n    // console.log('run')\n    loginByGoogle({\n      token: data.tokenId,\n      name: data.profileObj.name,\n      thirdPartyAvatar: data.profileObj.imageUrl,\n      email: data.profileObj.email,\n      googleId: data.googleId\n    });\n  };\n\n  var responseFacebook = function responseFacebook(data) {\n    // console.log(data);\n    loginByFacebook({\n      token: data.accessToken,\n      name: data.name,\n      email: data.email,\n      facebookId: data.id,\n      thirdPartyAvatar: data.picture.data.url\n    });\n  };\n\n  var renderChatMessages = function renderChatMessages() {\n    return messages.map(function (item, i) {\n      if (item.type === 'text') {\n        if (isAdmin) {\n          return item.sender === 'Admin' ? __jsx(\"div\", {\n            key: i\n          }, renderTime(i), __jsx(\"div\", {\n            className: styles.normalText\n          }, item.message), lastSeenIndex === i && __jsx(\"div\", {\n            className: styles.seen\n          }, \" \\u2713 \\u0110\\xE3 xem\")) : __jsx(\"div\", {\n            key: i\n          }, renderTime(i), __jsx(\"div\", {\n            className: styles.senderText\n          }, item.message));\n        } else {\n          return item.sender === 'Admin' ? __jsx(\"div\", {\n            key: i\n          }, renderTime(i), __jsx(\"div\", {\n            className: styles.senderText\n          }, item.message)) : __jsx(\"div\", {\n            key: i\n          }, renderTime(i), __jsx(\"div\", {\n            className: styles.normalText\n          }, item.message), lastSeenIndex === i && __jsx(\"div\", {\n            className: styles.seen\n          }, \" \\u2713 \\u0110\\xE3 xem\"));\n        }\n      }\n    });\n  };\n\n  useEffect(function () {\n    if (loginByGoogleError) {\n      message.error(loginByGoogleError);\n    }\n  }, [loginByGoogleError]);\n  useEffect(function () {\n    if (loginByFacebookError) {\n      message.error(loginByFacebookError);\n    }\n  }, [loginByFacebookError]);\n  return __jsx(\"div\", {\n    className: styles.chatWrapper,\n    onClick: handleClick\n  }, __jsx(\"div\", {\n    className: styles.top\n  }, __jsx(\"div\", {\n    className: styles.admin\n  }, __jsx(\"div\", {\n    className: styles.leftAdmin\n  }, typeof roomInfo === 'boolean' ? __jsx(\"div\", {\n    className: styles.avatar\n  }, __jsx(Avatar, {\n    style: {\n      backgroundColor: '#e91e63',\n      width: '3rem',\n      height: '3rem',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: '1.5rem'\n    },\n    icon: __jsx(UserOutlined, null)\n  })) : // @ts-ignore\n  __jsx(UserAvatar, {\n    userId: roomInfo.roomId\n  }), __jsx(\"div\", {\n    className: styles.dot\n  })), __jsx(\"div\", {\n    className: styles.rightAdmin\n  }, typeof roomInfo === 'boolean' ? __jsx(\"div\", {\n    className: styles.name\n  }, \"Admin\") : __jsx(\"div\", {\n    className: styles.name\n  }, roomInfo.roomName), isOnline ? __jsx(\"div\", {\n    className: styles.status\n  }, \"online\") : __jsx(\"div\", {\n    className: styles.statusOffline\n  }, \"offline\"))), __jsx(\"div\", {\n    className: styles.close,\n    onClick: handleCloseChat\n  }, __jsx(\"img\", {\n    src: \"/icons/close-2.svg\",\n    alt: \"close\"\n  }))), user ? __jsx(React.Fragment, null, ' ', __jsx(\"div\", {\n    className: styles.middle,\n    id: \"text\"\n  }, messages && renderChatMessages()), __jsx(\"div\", {\n    className: styles.bottom\n  }, __jsx(\"div\", {\n    className: styles.inputWrapper\n  }, __jsx(\"div\", {\n    className: styles.input\n  }, __jsx(InputEmoji, {\n    cleanOnEnter: true,\n    onEnter: handleSendMessage,\n    placeholder: \"Nh\\u1EADp tin nh\\u1EAFn\"\n  })), __jsx(\"div\", {\n    className: styles.send,\n    onClick: handleSendMessage\n  }, __jsx(\"img\", {\n    src: \"/icons/send.svg\",\n    alt: \"send\"\n  }))))) : __jsx(\"div\", {\n    className: styles.requireLogin\n  }, \"B\\u1EA1n ph\\u1EA3i \\u0111\\u0103ng nh\\u1EADp \\u0111\\u1EC3 chat!\", __jsx(\"br\", null), __jsx(GoogleLogin, {\n    clientId: \"374918945235-8gdpha6da5h9sqva4mgi53ldreces79b.apps.googleusercontent.com\",\n    render: function render(renderProps) {\n      return __jsx(\"div\", {\n        className: styles.item,\n        onClick: renderProps.onClick\n      }, __jsx(\"div\", {\n        className: styles.icon\n      }, __jsx(\"img\", {\n        src: \"/icons/google.svg\",\n        alt: \"google\"\n      })), __jsx(\"div\", {\n        className: styles.text\n      }, \"\\u0110\\u0103ng nh\\u1EADp b\\u1EB1ng Google\"));\n    },\n    buttonText: \"Login\",\n    onSuccess: responseGoogle,\n    onFailure: responseGoogle,\n    cookiePolicy: 'single_host_origin'\n  }), __jsx(FacebookLogin, {\n    appId: \"659986671317584\" // autoLoad\n    ,\n    fields: \"name,email,picture,id\",\n    callback: responseFacebook,\n    render: function render(renderProps) {\n      return __jsx(\"div\", {\n        className: styles.item,\n        onClick: renderProps.onClick\n      }, __jsx(\"div\", {\n        className: styles.icon\n      }, __jsx(\"img\", {\n        src: \"/icons/facebook.svg\",\n        alt: \"facebook\"\n      })), __jsx(\"div\", {\n        className: styles.text\n      }, \"\\u0110\\u0103ng nh\\u1EADp b\\u1EB1ng Facebook\"));\n    }\n  })));\n}\n\n_s(ChatWindow, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = ChatWindow;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loginByGoogleError: state.users.loginByGoogleError,\n    loginByFacebookError: state.users.loginByFacebookError\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loginByGoogle: loginByGoogle,\n  loginByFacebook: loginByFacebook\n})(ChatWindow);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/components/ChatWindow/index.tsx"],"names":["React","useEffect","Avatar","styles","UserOutlined","UserAvatar","_","moment","FacebookLogin","GoogleLogin","InputEmoji","loginByGoogle","loginByFacebook","connect","message","ChatWindow","messages","handleSendMessage","handleCloseChat","user","isAdmin","isOnline","roomInfo","handleClick","loginByGoogleError","loginByFacebookError","lastSeenIndex","length","sender","findLastIndex","seen","renderTime","i","createdAt","time","locale","startOf","fromNow","responseGoogle","data","token","tokenId","name","profileObj","thirdPartyAvatar","imageUrl","email","googleId","responseFacebook","accessToken","facebookId","id","picture","url","renderChatMessages","map","item","type","normalText","senderText","error","chatWrapper","top","admin","leftAdmin","avatar","backgroundColor","width","height","display","alignItems","justifyContent","fontSize","roomId","dot","rightAdmin","roomName","status","statusOffline","close","middle","bottom","inputWrapper","input","send","requireLogin","renderProps","onClick","icon","text","mapStateToProps","state","users"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n// import { toggleChatBubble } from 'redux/actions/ui';\nimport { Avatar } from 'antd';\nimport styles from './ChatWindow.module.scss';\nimport { UserOutlined } from '@ant-design/icons';\n// import Button from '@material-ui/core/Button';\nimport UserAvatar from 'components/UserAvatar';\nimport _ from 'lodash';\nimport moment from 'moment';\n// @ts-ignore\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\nimport GoogleLogin from 'react-google-login';\nimport InputEmoji from 'components/EmojiInput';\nimport { loginByGoogle, loginByFacebook } from 'redux/actions/users';\nimport { connect } from 'react-redux';\nimport { message } from 'antd'\n\nfunction ChatWindow({\n  messages,\n  // handleOpenLogin,\n  handleSendMessage,\n  handleCloseChat,\n  user,\n  isAdmin,\n  isOnline,\n  roomInfo,\n  handleClick,\n  loginByGoogle,\n  loginByGoogleError,\n  // loginUserError;\n  loginByFacebookError,\n  loginByFacebook\n}: any) {\n  // @ts-ignore\n  let lastSeenIndex: number;\n  if (isAdmin && messages.length) {\n    if (messages[messages.length - 1].sender === 'Admin') {\n      // @ts-ignore\n      lastSeenIndex = _.findLastIndex(messages, (message) => message.seen && message.sender === 'Admin');\n    }\n  } else if (!isAdmin && messages.length) {\n    if (messages[messages.length - 1].sender !== 'Admin') {\n      // @ts-ignore\n      lastSeenIndex = _.findLastIndex(messages, (message) => message.seen && message.sender !== 'Admin');\n    }\n  }\n\n  const renderTime = (i: number) => {\n    if (i !== 0) {\n      if (messages[i].createdAt - messages[i - 1].createdAt > 120000) {\n        return (\n          <div className={styles.time}>{moment(messages[i].createdAt).locale('vi').startOf('minute').fromNow()}</div>\n        );\n      }\n    } else {\n      return (\n        <div className={styles.time}>{moment(messages[i].createdAt).locale('vi').startOf('minute').fromNow()}</div>\n      );\n    }\n  };\n\n  const responseGoogle = (data: any) => {\n    // console.log('run')\n    loginByGoogle({\n      token: data.tokenId,\n      name: data.profileObj.name,\n      thirdPartyAvatar: data.profileObj.imageUrl,\n      email: data.profileObj.email,\n      googleId: data.googleId,\n    });\n  };\n\n  const responseFacebook = (data: any) => {\n    // console.log(data);\n    loginByFacebook({\n      token: data.accessToken,\n      name: data.name,\n      email: data.email,\n      facebookId: data.id,\n      thirdPartyAvatar: data.picture.data.url,\n    });\n  };\n\n  const renderChatMessages = () =>\n    messages.map((item: any, i: number) => {\n      if (item.type === 'text') {\n        if (isAdmin) {\n          return item.sender === 'Admin' ? (\n            <div key={i}>\n              {renderTime(i)}\n              <div className={styles.normalText}>{item.message}</div>\n              {lastSeenIndex === i && <div className={styles.seen}> ✓ Đã xem</div>}\n            </div>\n          ) : (\n            <div key={i}>\n              {renderTime(i)}\n              <div className={styles.senderText}>{item.message}</div>\n            </div>\n          );\n        } else {\n          return item.sender === 'Admin' ? (\n            <div key={i}>\n              {renderTime(i)}\n              <div className={styles.senderText}>{item.message}</div>\n            </div>\n          ) : (\n            <div key={i}>\n              {renderTime(i)}\n              <div className={styles.normalText}>{item.message}</div>\n              {lastSeenIndex === i && <div className={styles.seen}> ✓ Đã xem</div>}\n            </div>\n          );\n        }\n      }\n    });\n  useEffect(() => {\n    if (loginByGoogleError) {\n      message.error(loginByGoogleError);\n    }\n  }, [loginByGoogleError]);\n\n  useEffect(() => {\n    if (loginByFacebookError) {\n      message.error(loginByFacebookError);\n    }\n  }, [loginByFacebookError]);\n  return (\n    <div className={styles.chatWrapper} onClick={handleClick}>\n      <div className={styles.top}>\n        <div className={styles.admin}>\n          <div className={styles.leftAdmin}>\n            {typeof roomInfo === 'boolean' ? (\n              <div className={styles.avatar}>\n                <Avatar\n                  style={{\n                    backgroundColor: '#e91e63',\n                    width: '3rem',\n                    height: '3rem',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontSize: '1.5rem',\n                  }}\n                  icon={<UserOutlined />}\n                />\n              </div>\n            ) : (\n              // @ts-ignore\n              <UserAvatar userId={roomInfo.roomId} />\n            )}\n\n            <div className={styles.dot}></div>\n          </div>\n          <div className={styles.rightAdmin}>\n            {typeof roomInfo === 'boolean' ? (\n              <div className={styles.name}>Admin</div>\n            ) : (\n              <div className={styles.name}>{roomInfo.roomName}</div>\n            )}\n            {isOnline ? (\n              <div className={styles.status}>online</div>\n            ) : (\n              <div className={styles.statusOffline}>offline</div>\n            )}\n          </div>\n        </div>\n        <div className={styles.close} onClick={handleCloseChat}>\n          <img src=\"/icons/close-2.svg\" alt=\"close\" />\n        </div>\n      </div>\n      {user ? (\n        <>\n          {' '}\n          <div className={styles.middle} id=\"text\">\n            {messages && renderChatMessages()}\n          </div>\n          <div className={styles.bottom}>\n            <div className={styles.inputWrapper}>\n              <div className={styles.input}>\n                {/* <input\n                  value={input}\n                  onChange={handleTextChange}\n                  type=\"text\"\n                  placeholder=\"Nhập tin nhắn\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      handleSendMessage();\n                    }\n                  }}\n                /> */}\n                {/* @ts-ignore */}\n                <InputEmoji cleanOnEnter onEnter={handleSendMessage} placeholder=\"Nhập tin nhắn\" />\n              </div>\n              <div className={styles.send} onClick={handleSendMessage}>\n                <img src=\"/icons/send.svg\" alt=\"send\" />\n              </div>\n            </div>\n            {/* <div className={styles.attachWrapper}>\n              <div className={styles.attachItem}>\n                <img src=\"/icons/smile.svg\" alt=\"smile\" />\n              </div>\n              <div className={styles.attachItem}>\n                <img src=\"/icons/picture.svg\" alt=\"pucture\" />\n              </div>\n            </div> */}\n          </div>\n        </>\n      ) : (\n        <div className={styles.requireLogin}>\n          Bạn phải đăng nhập để chat!\n          <br/>\n          <GoogleLogin\n          clientId=\"374918945235-8gdpha6da5h9sqva4mgi53ldreces79b.apps.googleusercontent.com\"\n          render={(renderProps) => (\n            <div className={styles.item} onClick={renderProps.onClick}>\n              <div className={styles.icon}>\n                <img src=\"/icons/google.svg\" alt=\"google\" />\n              </div>\n              <div className={styles.text}>Đăng nhập bằng Google</div>\n            </div>\n          )}\n          buttonText=\"Login\"\n          onSuccess={responseGoogle}\n          onFailure={responseGoogle}\n          cookiePolicy={'single_host_origin'}\n        />\n        <FacebookLogin\n          appId=\"659986671317584\"\n          // autoLoad\n          fields=\"name,email,picture,id\"\n          callback={responseFacebook}\n          render={(renderProps: any) => (\n            <div className={styles.item} onClick={renderProps.onClick}>\n              <div className={styles.icon}>\n                <img src=\"/icons/facebook.svg\" alt=\"facebook\" />\n              </div>\n              <div className={styles.text}>Đăng nhập bằng Facebook</div>\n            </div>\n          )}\n        />\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: any) => ({\n  loginByGoogleError: state.users.loginByGoogleError,\n  loginByFacebookError: state.users.loginByFacebookError,\n});\n\nexport default connect(mapStateToProps, { loginByGoogle, loginByFacebook })(ChatWindow)\n"]},"metadata":{},"sourceType":"module"}