{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/admins';\nimport * as api from '../api/admins';\n\nfunction* getUsers() {\n  try {\n    const result = yield call(api.getUsers);\n    yield put(actions.getUsersSuccess(_objectSpread({}, result.data.users)));\n  } catch (e) {\n    yield put(actions.getUsersError({\n      error: 'Lấy thông tin người dùng thất bại'\n    }));\n  }\n}\n\nfunction* watchGetUsersRequest() {\n  yield takeEvery(actions.Types.GET_USERS, getUsers);\n}\n\nfunction* createUser({\n  payload\n}) {\n  try {\n    yield call(api.createUserByAdmin, {\n      name: payload.name,\n      email: payload.email,\n      password: payload.password,\n      role: payload.role\n    });\n    yield call(getUsers);\n  } catch (error) {\n    const errordata = error.response.data;\n\n    if (errordata.error.includes('E11000')) {\n      yield put(actions.createUserError({\n        error: 'Email đã tồn tại'\n      }));\n    } else {\n      yield put(actions.createUserError({\n        error: 'Đăng ký thất bại'\n      }));\n    }\n  }\n}\n\nfunction* watchCreateUserRequest() {\n  yield takeLatest(actions.Types.CREATE_USER, createUser);\n}\n\nfunction* deleteUser(payload) {\n  try {\n    yield call(api.deleteUser, payload);\n    yield call(getUsers);\n  } catch (e) {\n    yield put(actions.deleteUserError({\n      error: 'Xóa thất bại'\n    }));\n  }\n}\n\nfunction* watchDeleteUserRequest() {\n  while (true) {\n    const {\n      payload\n    } = yield take(actions.Types.DELETE_USER);\n    yield call(deleteUser, payload);\n  }\n}\n\nfunction* updateUser({\n  payload\n}) {\n  try {\n    yield call(api.editUser, {\n      name: payload.fields.name,\n      email: payload.fields.email,\n      password: payload.fields.password,\n      role: payload.fields.role,\n      id: payload.id\n    });\n    yield call(getUsers);\n  } catch (error) {\n    yield put(actions.editUserError({\n      error: 'Sửa người dùng thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateUserRequest() {\n  yield takeLatest(actions.Types.EDIT_USER, updateUser);\n}\n\nfunction* getCarousels() {\n  try {\n    const result = yield call(api.getSiteCarousel);\n    yield put(actions.getSiteCarouselSuccess(_objectSpread({}, result.data.site.carousel)));\n  } catch (e) {\n    yield put(actions.getUsersError({\n      error: 'Lấy thông tin băng chuyền thất bại'\n    }));\n  }\n}\n\nfunction* watchGetSiteCarouselsRequest() {\n  yield takeEvery(actions.Types.GET_SITE_CAROUSEL, getCarousels);\n}\n\nfunction* getSiteInfos() {\n  try {\n    const result = yield call(api.getSiteInfo);\n    yield put(actions.getSiteInfoSuccess(_objectSpread({}, result.data.site.siteInfo)));\n  } catch (e) {\n    yield put(actions.getSiteInfoError({\n      error: 'Lấy thông tin liên hệ thất bại'\n    }));\n  }\n}\n\nfunction* watchGetSiteInfosRequest() {\n  yield takeEvery(actions.Types.GET_SITE_INFO, getSiteInfos);\n}\n\nfunction* updateSiteCarousel({\n  payload\n}) {\n  try {\n    yield call(api.updateSiteCarousel, {\n      key: payload.key,\n      data: payload.data\n    });\n    yield call(getCarousels);\n  } catch (error) {\n    yield put(actions.updateSiteCarouselError({\n      error: 'Sửa thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateSiteCarouselsRequest() {\n  yield takeLatest(actions.Types.UPDATE_SITE_CAROUSEL, updateSiteCarousel);\n}\n\nfunction* updateSiteInfo({\n  payload\n}) {\n  try {\n    yield call(api.updateSiteInfo, payload);\n    yield call(getSiteInfos);\n  } catch (error) {\n    yield put(actions.updateSiteInfoError({\n      error: 'Sửa thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateSiteInfosRequest() {\n  yield takeLatest(actions.Types.UPDATE_SITE_INFO, updateSiteInfo);\n}\n\nconst adminSagas = [fork(watchGetUsersRequest), fork(watchGetSiteCarouselsRequest), fork(watchGetSiteInfosRequest), fork(watchCreateUserRequest), fork(watchDeleteUserRequest), fork(watchUpdateUserRequest), fork(watchUpdateSiteCarouselsRequest), fork(watchUpdateSiteInfosRequest)];\nexport default adminSagas;","map":null,"metadata":{},"sourceType":"module"}