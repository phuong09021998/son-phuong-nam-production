{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n//@ts-nocheck\n// vendors\nimport React, { useState, useImperativeHandle, useEffect, useRef, forwardRef, useCallback, useMemo } from 'react';\nimport { Picker } from 'emoji-mart';\nimport t from 'prop-types';\nimport LazyLoad from 'react-lazy-load'; // utils\n\nimport useDebounce from './use-debounce';\n\nfunction InputEmoji(_ref, ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      cleanOnEnter = _ref.cleanOnEnter,\n      onEnter = _ref.onEnter,\n      placeholder = _ref.placeholder,\n      onResize = _ref.onResize,\n      onClick = _ref.onClick,\n      onFocus = _ref.onFocus,\n      maxLength = _ref.maxLength,\n      keepOpenend = _ref.keepOpenend,\n      onKeyDown = _ref.onKeyDown,\n      inputClass = _ref.inputClass,\n      disableRecent = _ref.disableRecent,\n      tabIndex = _ref.tabIndex,\n      borderRadius = _ref.borderRadius,\n      borderColor = _ref.borderColor,\n      fontSize = _ref.fontSize,\n      fontFamily = _ref.fontFamily;\n\n  var _useState = useState(false),\n      showPicker = _useState[0],\n      setShowPicker = _useState[1];\n\n  var _useState2 = useState({}),\n      allEmojiStyle = _useState2[0],\n      setAllEmojiStyle = _useState2[1];\n\n  var _useState3 = useState(null),\n      currentSize = _useState3[0],\n      setCurrentSize = _useState3[1];\n\n  var textInputRef = useRef(null);\n  var cleanedTextRef = useRef('');\n  var placeholderRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      get value() {\n        return cleanedTextRef.current;\n      },\n\n      set value(value) {\n        setValue(value);\n      },\n\n      focus: function focus() {\n        textInputRef.current.focus();\n      },\n      blur: function blur() {\n        replaceAllTextEmojiToString();\n      }\n    };\n  });\n  var replaceAllTextEmojis = useCallback(function (text) {\n    var allEmojis = getAllEmojisFromText(text);\n\n    if (allEmojis) {\n      allEmojis = _toConsumableArray(new Set(allEmojis)); // remove duplicates\n\n      allEmojis.forEach(function (emoji) {\n        var style = allEmojiStyle[emoji];\n        if (!style) return;\n        text = replaceAll(text, emoji, \"<img style=\\\"\".concat(style, \"\\\" data-emoji=\\\"\").concat(emoji, \"\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/c/ce/Transparent.gif\\\" />\"));\n      });\n    }\n\n    return text;\n  }, [allEmojiStyle]);\n  var updateHTML = useCallback(function (nextValue) {\n    nextValue = nextValue || value;\n    textInputRef.current.innerHTML = replaceAllTextEmojis(nextValue || '');\n  }, [replaceAllTextEmojis]);\n  var checkAndEmitResize = useCallback(function () {\n    var nextSize = {\n      width: textInputRef.current.offsetWidth,\n      height: textInputRef.current.offsetHeight\n    };\n\n    if (!currentSize || currentSize.width !== nextSize.width || currentSize.height !== nextSize.height) {\n      onResize(nextSize);\n      setCurrentSize(nextSize);\n    }\n  }, [currentSize, onResize]);\n  var emitChange = useCallback(function () {\n    if (typeof onChange === 'function') {\n      onChange(cleanedTextRef.current);\n    }\n\n    if (typeof onResize === 'function') {\n      checkAndEmitResize();\n    }\n  }, [checkAndEmitResize, onChange, onResize]);\n  useEffect(function () {\n    function handleCopy(e) {\n      var selectedText = window.getSelection();\n      var container = document.createElement('div');\n\n      for (var i = 0, len = selectedText.rangeCount; i < len; ++i) {\n        container.appendChild(selectedText.getRangeAt(i).cloneContents());\n      }\n\n      container = replaceEmojiToString(container);\n      e.clipboardData.setData('text', container.innerText);\n      e.preventDefault();\n\n      function replaceEmojiToString(container) {\n        var images = Array.prototype.slice.call(container.querySelectorAll('img'));\n        images.forEach(function (image) {\n          image.outerHTML = image.dataset.emoji;\n        });\n        return container;\n      }\n    }\n\n    function handlePaste(e) {\n      e.preventDefault();\n      var content;\n\n      if (window.clipboardData) {\n        content = window.clipboardData.getData('Text');\n        content = replaceAllTextEmojis(content);\n\n        if (window.getSelection) {\n          var selObj = window.getSelection();\n          var selRange = selObj.getRangeAt(0);\n          selRange.deleteContents();\n          selRange.insertNode(document.createTextNode(content));\n        }\n      } else if (e.clipboardData) {\n        content = e.clipboardData.getData('text/plain');\n        content = replaceAllTextEmojis(content);\n        document.execCommand('insertHTML', false, content);\n      }\n    }\n\n    var inputEl = textInputRef.current;\n\n    var handleContentEditableInputCopyAndPaste = function handleContentEditableInputCopyAndPaste() {\n      inputEl.addEventListener('copy', handleCopy);\n      inputEl.addEventListener('paste', handlePaste);\n    };\n\n    handleContentEditableInputCopyAndPaste();\n    return function () {\n      inputEl.removeEventListener('copy', handleCopy);\n      inputEl.removeEventListener('paste', handlePaste);\n    };\n  }, [replaceAllTextEmojis]);\n  useEffect(function () {\n    var allEmojiButton = Array.prototype.slice.call(document.querySelectorAll('.emoji-mart-category-list > li > button'));\n    var allEmojiStyle = {};\n    allEmojiButton.forEach(function (emojiButton) {\n      var label = emojiButton.getAttribute('aria-label');\n\n      var _label$split = label.split(','),\n          _label$split2 = _slicedToArray(_label$split, 1),\n          emoji = _label$split2[0];\n\n      var emojiSpanEl = emojiButton.querySelector('span');\n      var style = replaceAll(emojiSpanEl.style.cssText, '\"', \"'\");\n      allEmojiStyle[emoji] = style;\n    });\n    setAllEmojiStyle(allEmojiStyle);\n  }, []);\n  useEffect(function () {\n    updateHTML();\n  }, [updateHTML]);\n  var replaceAllTextEmojiToString = useCallback(function () {\n    if (!textInputRef.current) {\n      cleanedTextRef.current = '';\n    }\n\n    var container = document.createElement('div');\n    container.innerHTML = textInputRef.current.innerHTML;\n    var images = Array.prototype.slice.call(container.querySelectorAll('img'));\n    images.forEach(function (image) {\n      image.outerHTML = image.dataset.emoji;\n    });\n    var text = container.innerText; // remove all â†µ for safari\n\n    text = text.replace(/\\n/gi, '');\n    cleanedTextRef.current = text;\n    checkPlaceholder();\n    emitChange();\n  }, [emitChange]);\n\n  var _useDebounce = useDebounce(replaceAllTextEmojiToString, 500),\n      _useDebounce2 = _slicedToArray(_useDebounce, 1),\n      replaceAllTextEmojiToStringDebounced = _useDebounce2[0];\n\n  useEffect(function () {\n    function handleKeydown(event) {\n      placeholderRef.current.style.opacity = 0;\n\n      if (typeof maxLength !== 'undefined' && event.keyCode !== 8 && totalCharacters() >= maxLength) {\n        event.preventDefault();\n      }\n\n      if (event.keyCode === 13) {\n        event.preventDefault();\n        replaceAllTextEmojiToString();\n        var cleanedText = cleanedTextRef.current;\n\n        if (typeof onEnter === 'function') {\n          onEnter(cleanedText);\n        }\n\n        if (cleanOnEnter) {\n          updateHTML('');\n        }\n\n        if (typeof onKeyDown === 'function') {\n          onKeyDown(event);\n        }\n\n        return false;\n      }\n\n      if (typeof onKeyDown === 'function') {\n        onKeyDown(event);\n      }\n    }\n\n    function handleKeyup() {\n      replaceAllTextEmojiToStringDebounced();\n    }\n\n    var inputEl = textInputRef.current;\n    inputEl.addEventListener('keydown', handleKeydown);\n    inputEl.addEventListener('keyup', handleKeyup);\n    return function () {\n      inputEl.removeEventListener('keydown', handleKeydown);\n      inputEl.removeEventListener('keyup', handleKeyup);\n    };\n  }, [onChange, cleanOnEnter, onEnter, updateHTML, replaceAllTextEmojiToString, replaceAllTextEmojiToStringDebounced, emitChange, maxLength, onKeyDown]);\n  useEffect(function () {\n    function handleFocus() {\n      if (typeof onFocus === 'function') {\n        onFocus();\n      }\n    }\n\n    var inputEl = textInputRef.current;\n    inputEl.addEventListener('focus', handleFocus);\n    return function () {\n      inputEl.removeEventListener('focus', handleFocus);\n    };\n  }, [onFocus]);\n\n  function totalCharacters() {\n    var text = textInputRef.current.innerText;\n    var html = textInputRef.current.innerHTML;\n    var textCount = text.length;\n    var emojisCount = (html.match(/<img/g) || []).length;\n    return textCount + emojisCount;\n  }\n\n  useEffect(function () {\n    if (textInputRef.current) {\n      setCurrentSize({\n        width: textInputRef.current.offsetWidth,\n        height: textInputRef.current.offsetHeight\n      });\n    }\n  }, []);\n  var excluePicker = useMemo(function () {\n    var exclude = [];\n\n    if (disableRecent) {\n      exclude.push('recent');\n    }\n\n    return exclude;\n  }, [disableRecent]);\n\n  function setValue(value) {\n    updateHTML(value);\n    textInputRef.current.blur();\n  }\n\n  function toggleShowPicker() {\n    setShowPicker(function (showPicker) {\n      return !showPicker;\n    });\n  }\n\n  function pasteHtmlAtCaret(html) {\n    var sel, range;\n\n    if (window.getSelection) {\n      // IE9 and non-IE\n      sel = window.getSelection();\n\n      if (sel.getRangeAt && sel.rangeCount) {\n        range = sel.getRangeAt(0);\n        range.deleteContents(); // Range.createContextualFragment() would be useful here but is\n        // non-standard and not supported in all browsers (IE9, for one)\n\n        var el = document.createElement('div');\n        el.innerHTML = html;\n        var frag = document.createDocumentFragment();\n        var node;\n        var lastNode;\n\n        while (node = el.firstChild) {\n          lastNode = frag.appendChild(node);\n        }\n\n        range.insertNode(frag); // Preserve the selection\n\n        if (lastNode) {\n          range = range.cloneRange();\n          range.setStartAfter(lastNode);\n          range.collapse(true);\n          sel.removeAllRanges();\n          sel.addRange(range);\n        }\n      }\n    } else if (document.selection && document.selection.type !== 'Control') {\n      // IE < 9\n      document.selection.createRange().pasteHTML(html);\n    }\n  }\n\n  function replaceAll(str, find, replace) {\n    return str.replace(new RegExp(find, 'g'), replace);\n  }\n\n  function getImage(emoji) {\n    var shortNames = \"\".concat(emoji.short_names);\n    shortNames = replaceAll(shortNames, ',', ', ');\n    var emojiSpanEl = document.querySelector(\"[aria-label=\\\"\".concat(emoji[\"native\"], \", \").concat(shortNames, \"\\\"] > span\"));\n    if (!emojiSpanEl) return '';\n    var style = replaceAll(emojiSpanEl.style.cssText, '\"', \"'\");\n    return \"<img style=\\\"\".concat(style, \"\\\" data-emoji=\\\"\").concat(emoji[\"native\"], \"\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/c/ce/Transparent.gif\\\" />\");\n  }\n\n  function handleSelectEmoji(emoji) {\n    placeholderRef.current.style.opacity = 0;\n    textInputRef.current.focus();\n    pasteHtmlAtCaret(getImage(emoji));\n    textInputRef.current.focus();\n    emitChange();\n\n    if (!keepOpenend) {\n      toggleShowPicker();\n    }\n  }\n\n  function getAllEmojisFromText(text) {\n    return text.match(/(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?)*/g);\n  }\n\n  function checkPlaceholder() {\n    var text = cleanedTextRef.current;\n\n    if (text !== '' && placeholderRef.current.opacity !== 0) {\n      placeholderRef.current.style.opacity = 0;\n    } else {\n      placeholderRef.current.style.opacity = 1;\n    }\n  }\n\n  function handleClick() {\n    if (typeof onClick === 'function') {\n      onClick();\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: \"react-emoji\"\n  }, __jsx(\"div\", {\n    className: \"react-emoji-picker--container\"\n  }, __jsx(\"div\", {\n    className: \"react-emoji-picker--wrapper\".concat(showPicker ? ' react-emoji-picker--wrapper__show' : '')\n  }, __jsx(\"div\", {\n    className: \"react-emoji-picker\".concat(showPicker ? ' react-emoji-picker__show' : '')\n  }, __jsx(LazyLoad, null, __jsx(Picker, {\n    showPreview: false,\n    showSkinTones: false,\n    set: \"apple\",\n    onSelect: handleSelectEmoji,\n    exclude: excluePicker\n  }))))), __jsx(\"div\", {\n    className: \"react-input-emoji--container\",\n    style: {\n      borderRadius: borderRadius,\n      borderColor: borderColor,\n      fontSize: fontSize,\n      fontFamily: fontFamily\n    }\n  }, __jsx(\"div\", {\n    className: \"react-input-emoji--wrapper\",\n    onClick: handleClick\n  }, __jsx(\"div\", {\n    ref: placeholderRef,\n    className: \"react-input-emoji--placeholder\"\n  }, placeholder), __jsx(\"div\", {\n    ref: textInputRef,\n    tabIndex: tabIndex,\n    contentEditable: true,\n    className: \"react-input-emoji--input\".concat(inputClass ? \" \".concat(inputClass) : ''),\n    onBlur: emitChange\n  }))), __jsx(\"button\", {\n    className: \"react-input-emoji--button\".concat(showPicker ? ' react-input-emoji--button__show' : ''),\n    onClick: toggleShowPicker\n  }, __jsx(\"img\", {\n    src: \"/icons/smile.svg\",\n    alt: \"smile\",\n    style: {\n      width: '1.5em'\n    }\n  })), showPicker && __jsx(\"div\", {\n    className: \"react-input-emoji--overlay\",\n    onClick: toggleShowPicker\n  }));\n}\n\nvar InputEmojiWithRef = forwardRef(InputEmoji);\nInputEmojiWithRef.propTypes = {\n  value: t.string,\n  onChange: t.func,\n  cleanOnEnter: t.bool,\n  onEnter: t.func,\n  placeholder: t.string,\n  onResize: t.func,\n  onClick: t.func,\n  onFocus: t.func,\n  maxLength: t.number,\n  keepOpenend: t.bool,\n  onKeyDown: t.func,\n  inputClass: t.string,\n  disableRecent: t.bool,\n  tabIndex: t.number,\n  // style\n  height: t.number,\n  borderRadius: t.number,\n  borderColor: t.string,\n  fontSize: t.number,\n  fontFamily: t.string\n};\nInputEmojiWithRef.defaultProps = {\n  height: 30,\n  placeholder: 'Type a message',\n  borderRadius: 21,\n  borderColor: '#EAEAEA',\n  fontSize: 15,\n  fontFamily: 'sans-serif',\n  tabIndex: 0\n};\nexport default InputEmojiWithRef;","map":null,"metadata":{},"sourceType":"module"}