{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/admins';\nimport * as api from '../api/admins';\n\nfunction* getUsers() {\n  try {\n    const result = yield call(api.getUsers);\n    yield put(actions.getUsersSuccess(_objectSpread({}, result.data.users)));\n  } catch (e) {\n    yield put(actions.getUsersError({\n      error: 'Lấy thông tin người dùng thất bại'\n    }));\n  }\n}\n\nfunction* watchGetUsersRequest() {\n  yield takeEvery(actions.Types.GET_USERS, getUsers);\n}\n\nfunction* createUser({\n  payload\n}) {\n  try {\n    yield call(api.createUserByAdmin, {\n      name: payload.name,\n      email: payload.email,\n      password: payload.password,\n      role: payload.role\n    });\n    yield call(getUsers);\n  } catch (error) {\n    const errordata = error.response.data;\n\n    if (errordata.error.includes('E11000')) {\n      yield put(actions.createUserError({\n        error: 'Email đã tồn tại'\n      }));\n    } else {\n      yield put(actions.createUserError({\n        error: 'Đăng ký thất bại'\n      }));\n    }\n  }\n}\n\nfunction* watchCreateUserRequest() {\n  yield takeLatest(actions.Types.CREATE_USER, createUser);\n}\n\nfunction* deleteUser(payload) {\n  try {\n    yield call(api.deleteUser, payload);\n    yield call(getUsers);\n  } catch (e) {\n    yield put(actions.deleteUserError({\n      error: 'Xóa thất bại'\n    }));\n  }\n}\n\nfunction* watchDeleteUserRequest() {\n  while (true) {\n    const {\n      payload\n    } = yield take(actions.Types.DELETE_USER);\n    yield call(deleteUser, payload);\n  }\n}\n\nfunction* updateUser({\n  payload\n}) {\n  try {\n    yield call(api.editUser, {\n      name: payload.fields.name,\n      email: payload.fields.email,\n      password: payload.fields.password,\n      role: payload.fields.role,\n      id: payload.id\n    });\n    yield call(getUsers);\n  } catch (error) {\n    yield put(actions.editUserError({\n      error: 'Sửa người dùng thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateUserRequest() {\n  yield takeLatest(actions.Types.EDIT_USER, updateUser);\n}\n\nfunction* getCarousels() {\n  try {\n    const result = yield call(api.getSiteCarousel);\n    yield put(actions.getSiteCarouselSuccess(_objectSpread({}, result.data.site.carousel)));\n  } catch (e) {\n    yield put(actions.getUsersError({\n      error: 'Lấy thông tin băng chuyền thất bại'\n    }));\n  }\n}\n\nfunction* watchGetSiteCarouselsRequest() {\n  yield takeEvery(actions.Types.GET_SITE_CAROUSEL, getCarousels);\n}\n\nfunction* getSiteInfos() {\n  try {\n    const result = yield call(api.getSiteInfo);\n    yield put(actions.getSiteInfoSuccess(_objectSpread({}, result.data.site.siteInfo)));\n  } catch (e) {\n    yield put(actions.getSiteInfoError({\n      error: 'Lấy thông tin liên hệ thất bại'\n    }));\n  }\n}\n\nfunction* watchGetSiteInfosRequest() {\n  yield takeEvery(actions.Types.GET_SITE_INFO, getSiteInfos);\n}\n\nfunction* updateSiteCarousel({\n  payload\n}) {\n  try {\n    yield call(api.updateSiteCarousel, {\n      key: payload.key,\n      data: payload.data\n    });\n    yield call(getCarousels);\n  } catch (error) {\n    yield put(actions.updateSiteCarouselError({\n      error: 'Sửa thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateSiteCarouselsRequest() {\n  yield takeLatest(actions.Types.UPDATE_SITE_CAROUSEL, updateSiteCarousel);\n}\n\nfunction* updateSiteInfo({\n  payload\n}) {\n  try {\n    yield call(api.updateSiteInfo, payload);\n    yield call(getSiteInfos);\n  } catch (error) {\n    yield put(actions.updateSiteInfoError({\n      error: 'Sửa thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateSiteInfosRequest() {\n  yield takeLatest(actions.Types.UPDATE_SITE_INFO, updateSiteInfo);\n}\n\nconst adminSagas = [fork(watchGetUsersRequest), fork(watchGetSiteCarouselsRequest), fork(watchGetSiteInfosRequest), fork(watchCreateUserRequest), fork(watchDeleteUserRequest), fork(watchUpdateUserRequest), fork(watchUpdateSiteCarouselsRequest), fork(watchUpdateSiteInfosRequest)];\nexport default adminSagas;","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/redux/sagas/admins.ts"],"names":["takeLatest","takeEvery","take","call","put","fork","actions","api","getUsers","result","getUsersSuccess","data","users","e","getUsersError","error","watchGetUsersRequest","Types","GET_USERS","createUser","payload","createUserByAdmin","name","email","password","role","errordata","response","includes","createUserError","watchCreateUserRequest","CREATE_USER","deleteUser","deleteUserError","watchDeleteUserRequest","DELETE_USER","updateUser","editUser","fields","id","editUserError","watchUpdateUserRequest","EDIT_USER","getCarousels","getSiteCarousel","getSiteCarouselSuccess","site","carousel","watchGetSiteCarouselsRequest","GET_SITE_CAROUSEL","getSiteInfos","getSiteInfo","getSiteInfoSuccess","siteInfo","getSiteInfoError","watchGetSiteInfosRequest","GET_SITE_INFO","updateSiteCarousel","key","updateSiteCarouselError","watchUpdateSiteCarouselsRequest","UPDATE_SITE_CAROUSEL","updateSiteInfo","updateSiteInfoError","watchUpdateSiteInfosRequest","UPDATE_SITE_INFO","adminSagas"],"mappings":"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","sourcesContent":["import { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/admins';\nimport * as api from '../api/admins';\n\nfunction* getUsers() {\n  try {\n    const result = yield call(api.getUsers);\n    yield put(actions.getUsersSuccess({ ...result.data.users }));\n  } catch (e) {\n    yield put(actions.getUsersError({ error: 'Lấy thông tin người dùng thất bại' }));\n  }\n}\n\nfunction* watchGetUsersRequest() {\n  yield takeEvery(actions.Types.GET_USERS, getUsers);\n}\n\nfunction* createUser({ payload }: any) {\n  try {\n    yield call(api.createUserByAdmin, {\n      name: payload.name,\n      email: payload.email,\n      password: payload.password,\n      role: payload.role,\n    });\n\n    yield call(getUsers);\n  } catch (error) {\n    const errordata = error.response.data;\n    if (errordata.error.includes('E11000')) {\n      yield put(actions.createUserError({ error: 'Email đã tồn tại' }));\n    } else {\n      yield put(actions.createUserError({ error: 'Đăng ký thất bại' }));\n    }\n  }\n}\n\nfunction* watchCreateUserRequest() {\n  yield takeLatest(actions.Types.CREATE_USER, createUser);\n}\n\ninterface DeleteUser {\n  id: string;\n}\n\nfunction* deleteUser(payload: DeleteUser) {\n  try {\n    yield call(api.deleteUser, payload);\n    yield call(getUsers);\n  } catch (e) {\n    yield put(actions.deleteUserError({ error: 'Xóa thất bại' }));\n  }\n}\n\nfunction* watchDeleteUserRequest() {\n  while (true) {\n    const { payload } = yield take(actions.Types.DELETE_USER);\n    yield call(deleteUser, payload);\n  }\n}\n\nfunction* updateUser({ payload }: any) {\n  try {\n    yield call(api.editUser, {\n      name: payload.fields.name,\n      email: payload.fields.email,\n      password: payload.fields.password,\n      role: payload.fields.role,\n      id: payload.id,\n    });\n\n    yield call(getUsers);\n  } catch (error) {\n    yield put(actions.editUserError({ error: 'Sửa người dùng thất bại' }));\n  }\n}\n\nfunction* watchUpdateUserRequest() {\n  yield takeLatest(actions.Types.EDIT_USER, updateUser);\n}\n\n\n\nfunction* getCarousels() {\n  try {\n    const result = yield call(api.getSiteCarousel);\n    yield put(actions.getSiteCarouselSuccess({ ...result.data.site.carousel }));\n  } catch (e) {\n    yield put(actions.getUsersError({ error: 'Lấy thông tin băng chuyền thất bại' }));\n  }\n}\n\nfunction* watchGetSiteCarouselsRequest() {\n  yield takeEvery(actions.Types.GET_SITE_CAROUSEL, getCarousels);\n}\n\nfunction* getSiteInfos() {\n  try {\n    const result = yield call(api.getSiteInfo);\n    yield put(actions.getSiteInfoSuccess({ ...result.data.site.siteInfo }));\n  } catch (e) {\n    yield put(actions.getSiteInfoError({ error: 'Lấy thông tin liên hệ thất bại' }));\n  }\n}\n\nfunction* watchGetSiteInfosRequest() {\n  yield takeEvery(actions.Types.GET_SITE_INFO, getSiteInfos);\n}\n\nfunction* updateSiteCarousel({ payload }: any) {\n  try {\n    yield call(api.updateSiteCarousel, {\n      key: payload.key,\n      data: payload.data\n    });\n\n    yield call(getCarousels);\n  } catch (error) {\n    yield put(actions.updateSiteCarouselError({ error: 'Sửa thất bại' }));\n  }\n}\n\nfunction* watchUpdateSiteCarouselsRequest() {\n  yield takeLatest(actions.Types.UPDATE_SITE_CAROUSEL, updateSiteCarousel);\n}\n\nfunction* updateSiteInfo({ payload }: any) {\n  try {\n    yield call(api.updateSiteInfo, payload);\n\n    yield call(getSiteInfos);\n  } catch (error) {\n    yield put(actions.updateSiteInfoError({ error: 'Sửa thất bại' }));\n  }\n}\n\nfunction* watchUpdateSiteInfosRequest() {\n  yield takeLatest(actions.Types.UPDATE_SITE_INFO, updateSiteInfo);\n}\n\n\nconst adminSagas = [\n  fork(watchGetUsersRequest),\n  fork(watchGetSiteCarouselsRequest),\n  fork(watchGetSiteInfosRequest),\n  fork(watchCreateUserRequest),\n  fork(watchDeleteUserRequest),\n  fork(watchUpdateUserRequest),\n  fork(watchUpdateSiteCarouselsRequest),\n  fork(watchUpdateSiteInfosRequest),\n];\n\nexport default adminSagas;\n"]},"metadata":{},"sourceType":"module"}