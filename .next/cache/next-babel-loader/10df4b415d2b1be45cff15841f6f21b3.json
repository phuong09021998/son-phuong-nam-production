{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Dropdown } from 'antd';\nimport axios from 'config/axios';\nimport styles from './AdminMessages.module.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport UserAvatar from 'components/UserAvatar';\nimport Button from '@material-ui/core/Button';\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\nimport ChatWindow from '../ChatWindow';\nimport scrollToBottom from 'components/utils/scrollBottom'; // @ts-ignore\n\nimport io from 'socket.io-client';\nimport { toggleChatBubble } from 'redux/actions/ui';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport baseUrl from 'config/basedUrl';\nimport localStorage from 'local-storage'; // @ts-ignore\n\nconst token = localStorage.get('spn_auth');\nconst header = {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n};\n\nfunction AdminMessages({\n  toggleChatBubble,\n  openChatWindow\n}) {\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: isOnline,\n    1: setOnline\n  } = useState(false);\n  const {\n    0: currentMessages,\n    1: setCurrentMessages\n  } = useState([]);\n  const {\n    0: currentRoomInfo,\n    1: setCurrentRoomInfo\n  } = useState({\n    roomName: '',\n    roomId: ''\n  });\n  const socketRef = useRef();\n  const {\n    0: activeUsers,\n    1: setActiveUsers\n  } = useState();\n  const {\n    0: openNontification,\n    1: setOpenNontification\n  } = useState(false);\n\n  const sortMessages = messages => {\n    return messages.sort((a, b) => {\n      return b.createdAt - a.createdAt;\n    });\n  };\n\n  useEffect(() => {\n    socketRef.current = io(baseUrl); // @ts-ignore\n\n    socketRef.current.emit('Login', {\n      userId: 'Admin'\n    });\n    axios.get('/messages/admin', header).then(res => {\n      if (res.data.lastChatMessages.length) {\n        // setMessages(res.data.lastChatMessages);\n        setMessages(sortMessages(res.data.lastChatMessages));\n        res.data.lastChatMessages.map(message => {\n          if (!message.seen && message.sender !== 'Admin') {\n            setOpenNontification(true);\n          }\n        }); // @ts-ignore\n      } else {\n        // @ts-ignore\n        setMessages(null);\n      }\n    }); // @ts-ignore\n\n    socketRef.current.on('Chat Message', data => {\n      // @ts-ignore\n      setCurrentMessages(oldMessages => [...oldMessages, data]);\n    }); // @ts-ignore\n\n    socketRef.current.on('Active Users', data => {\n      const dataArr = Object.values(data); // @ts-ignore\n\n      setActiveUsers(dataArr);\n    }); // @ts-ignore\n\n    socketRef.current.on('Admin Last Messages', data => {\n      if (data.sender !== 'Admin') setOpenNontification(true);\n    });\n  }, []);\n\n  const handleCloseChat = () => {\n    toggleChatBubble(false);\n  };\n\n  useEffect(() => {\n    if (openChatWindow) {\n      scrollToBottom();\n    }\n  }, [currentMessages, openChatWindow]);\n\n  const handleOpenWindowChat = (roomId, roomName) => {\n    // axios.post('/messages', { roomId }).then((res) => {\n    // @ts-ignore\n    socketRef.current.emit('Join room', {\n      roomId\n    });\n    setCurrentRoomInfo({\n      roomId: roomId,\n      roomName: roomName\n    }); // @ts-ignore\n\n    socketRef.current.emit('Set seen', {\n      user: roomName,\n      roomId\n    });\n    toggleChatBubble(false);\n    toggleChatBubble(true); // });\n  };\n\n  const handleSetSeen = () => {\n    // @ts-ignore\n    socketRef.current.emit('Set seen', {\n      user: currentRoomInfo.roomName,\n      roomId: currentRoomInfo.roomId\n    });\n    setOpenNontification(false);\n  };\n\n  const handleSendMessage = text => {\n    if (text) {\n      // @ts-ignore\n      socketRef.current.emit('Chat Message', {\n        data: {\n          roomId: currentRoomInfo.roomId,\n          message: text,\n          sender: 'Admin',\n          type: 'text',\n          createdAt: Date.now(),\n          roomName: currentRoomInfo.roomName\n        },\n        roomId: currentRoomInfo.roomId\n      });\n    }\n  };\n\n  const handleLoadMessages = () => {\n    // console.log('load messages');\n    setOpenNontification(false);\n    axios.get('/messages/admin', header).then(res => {\n      if (res.data.lastChatMessages.length) {\n        // setMessages(res.data.lastChatMessages);\n        setMessages(sortMessages(res.data.lastChatMessages)); // @ts-ignore\n      } else {\n        // @ts-ignore\n        setMessages(null);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (currentRoomInfo.roomId && currentRoomInfo.roomName) {\n      // @ts-ignore\n      setOnline(activeUsers.includes(currentRoomInfo.roomId)); // @ts-ignore\n\n      socketRef.current.on('Set Seen', () => {\n        axios.post('/messages', {\n          roomId: currentRoomInfo.roomId\n        }, header).then(res => {\n          setCurrentMessages(res.data.messages);\n        });\n      });\n    }\n  }, [currentRoomInfo, activeUsers]);\n\n  const messageDropdown = () => {\n    if (messages === null) {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, __jsx(\"div\", {\n        className: styles.noMessage\n      }, \"Kh\\xF4ng c\\xF3 tin nh\\u1EAFn n\\xE0o\"));\n    } else if (!messages.length) {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, __jsx(\"div\", {\n        className: styles.loading\n      }, __jsx(CircularProgress, {\n        color: \"secondary\",\n        size: 25\n      })));\n    } else {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, messages.map((message, i) => __jsx(\"div\", {\n        className: styles.messageItem,\n        key: i,\n        onClick: () => handleOpenWindowChat(message.roomId, message.roomName)\n      }, __jsx(\"div\", {\n        className: styles.avatar\n      }, __jsx(UserAvatar, {\n        userId: message.roomId,\n        key: i\n      }), activeUsers.includes(message.roomId) && __jsx(\"div\", {\n        className: styles.dot\n      })), __jsx(\"div\", {\n        className: styles.middleMessage\n      }, __jsx(\"div\", {\n        className: styles.name\n      }, message.roomName), __jsx(\"div\", {\n        className: styles.message // @ts-ignore\n        ,\n        style: message.seen || message.sender === 'Admin' ? {\n          color: 'gray'\n        } : null\n      }, message.sender === 'Admin' ? 'Báº¡n: ' : `${message.sender}: `, message.message)), __jsx(\"div\", {\n        className: styles.rightMessage\n      }, moment(message.createdAt).locale('vi').startOf('minute').fromNow()))));\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    overlay: messageDropdown,\n    placement: \"bottomCenter\",\n    trigger: ['click']\n  }, __jsx(Button, {\n    onClick: () => handleLoadMessages()\n  }, __jsx(\"div\", {\n    className: styles.topItem\n  }, __jsx(ModeCommentIcon, null), openNontification && __jsx(\"div\", {\n    className: styles.dot\n  })))), openChatWindow && __jsx(ChatWindow, {\n    user: true,\n    roomInfo: currentRoomInfo,\n    handleSendMessage: handleSendMessage,\n    handleCloseChat: handleCloseChat,\n    messages: currentMessages,\n    isAdmin: true // @ts-ignore\n    ,\n    isOnline: isOnline,\n    handleClick: handleSetSeen\n  }));\n}\n\nconst mapStateToProps = state => ({\n  openChatWindow: state.ui.openChatBubble\n});\n\nexport default connect(mapStateToProps, {\n  toggleChatBubble\n})(AdminMessages);","map":null,"metadata":{},"sourceType":"module"}