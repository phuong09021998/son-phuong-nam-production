{"ast":null,"code":"import { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/posts';\nimport * as api from '../api/posts';\n\nfunction* getPostsByAdmin() {\n  try {\n    const items = yield call(api.getPostsByAdmin);\n    yield put(actions.getPostsByAdminSuccess({\n      items: items.data.posts\n    }));\n  } catch (error) {\n    yield put(actions.getPostsByAdminError({\n      error: 'Lấy bài viết thất bại'\n    }));\n  }\n}\n\nfunction* watchGetPostsByAdminRequest() {\n  yield takeEvery(actions.Types.GET_POSTS_BY_ADMIN, getPostsByAdmin);\n}\n\nfunction* createPostByAdmin({\n  payload\n}) {\n  try {\n    yield call(api.createPost, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    const errorData = error.response.data;\n\n    if (errorData.error.includes('E11000')) {\n      yield put(actions.createPostError({\n        error: 'Tên bài viết đã tồn tại'\n      }));\n    } else {\n      yield put(actions.createPostError({\n        error: 'Tạo bài viết thất bại'\n      }));\n    }\n  }\n}\n\nfunction* watchCreatePostsByAdminRequest() {\n  yield takeLatest(actions.Types.CREATE_POST, createPostByAdmin);\n}\n\nfunction* deletePost(payload) {\n  try {\n    yield call(api.deletePost, payload);\n    yield call(getPostsByAdmin);\n  } catch (e) {\n    yield put(actions.deletePostError({\n      error: 'Xóa thất bại'\n    }));\n  }\n}\n\nfunction* watchDeletePostRequest() {\n  while (true) {\n    const {\n      payload\n    } = yield take(actions.Types.DELETE_POST);\n    yield call(deletePost, payload);\n  }\n}\n\nfunction* handleUpdatePublish({\n  payload\n}) {\n  try {\n    yield call(api.updatePublish, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    yield put(actions.updatePublishError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdatePublishRequest() {\n  yield takeLatest(actions.Types.UPDATE_PUBLISH, handleUpdatePublish);\n}\n\nfunction* handleUpdatePostRequest({\n  payload\n}) {\n  try {\n    yield call(api.updatePost, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    yield put(actions.updateError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdatePostRequest() {\n  yield takeLatest(actions.Types.UPDATE_POST, handleUpdatePostRequest);\n}\n\nconst postSagas = [fork(watchGetPostsByAdminRequest), fork(watchCreatePostsByAdminRequest), fork(watchDeletePostRequest), fork(watchUpdatePublishRequest), fork(watchUpdatePostRequest)];\nexport default postSagas;","map":null,"metadata":{},"sourceType":"module"}