{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getUser } from 'redux/actions/users';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { withRouter } from 'next/router';\n\nvar antIcon = __jsx(LoadingOutlined, {\n  style: {\n    fontSize: 50\n  },\n  spin: true\n});\n\nexport default function Auth(ComposedClass) {\n  var adminRoute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var AuthenticationCheck = /*#__PURE__*/function (_Component) {\n    _inherits(AuthenticationCheck, _Component);\n\n    var _super = _createSuper(AuthenticationCheck);\n\n    function AuthenticationCheck() {\n      var _this;\n\n      _classCallCheck(this, AuthenticationCheck);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _defineProperty(_assertThisInitialized(_this), \"state\", {\n        loading: true\n      });\n\n      return _this;\n    }\n\n    _createClass(AuthenticationCheck, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var getUser = this.props.getUser;\n        getUser();\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var _this$props = this.props,\n            user = _this$props.user,\n            router = _this$props.router,\n            getUserError = _this$props.getUserError;\n        var loading = this.state.loading; // console.log(getUserError);\n\n        if (getUserError) {\n          router.push('/');\n        }\n\n        if (adminRoute && loading && user) {\n          if (user.role < 1) {\n            router.push('/');\n          } else {\n            return this.setState({\n              loading: false\n            });\n          }\n        } else if (!adminRoute && loading && user) {\n          return this.setState({\n            loading: false\n          });\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var user = this.props.user;\n        var loading = this.state.loading;\n\n        if (loading) {\n          return __jsx(\"div\", {\n            style: {\n              width: '100%',\n              marginTop: '10em',\n              textAlign: 'center'\n            }\n          }, __jsx(Spin, {\n            indicator: antIcon\n          }));\n        }\n\n        return __jsx(ComposedClass, _extends({}, this.props, {\n          user: user\n        }));\n      }\n    }]);\n\n    return AuthenticationCheck;\n  }(Component);\n\n  function mapStateToProps(state) {\n    return {\n      user: state.users.data,\n      getUserError: state.users.getUserError\n    };\n  }\n\n  return connect(mapStateToProps, {\n    getUser: getUser\n  })(withRouter(AuthenticationCheck));\n}","map":null,"metadata":{},"sourceType":"module"}