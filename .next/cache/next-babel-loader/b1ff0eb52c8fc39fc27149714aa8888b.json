{"ast":null,"code":"// @ts-nocheck\n// vendors\nimport { useRef, useCallback, useEffect } from 'react';\nexport default function useDebounce(callback, delay) {\n  const maxWaitArgs = useRef([]);\n  const functionTimeoutHandler = useRef(null);\n  const isComponentUnmounted = useRef(false);\n  const debouncedFunction = callback;\n  useEffect(() => () => {\n    // we use flag, as we allow to call callPending outside the hook\n    isComponentUnmounted.current = true;\n  }, []);\n  const debouncedCallback = useCallback((...args) => {\n    maxWaitArgs.current = args;\n    clearTimeout(functionTimeoutHandler.current);\n    functionTimeoutHandler.current = setTimeout(() => {\n      if (!isComponentUnmounted.current) {\n        debouncedFunction(...args);\n      }\n    }, delay);\n  }, [debouncedFunction, delay]); // At the moment, we use 3 args array so that we save backward compatibility\n\n  return [debouncedCallback];\n}","map":null,"metadata":{},"sourceType":"module"}