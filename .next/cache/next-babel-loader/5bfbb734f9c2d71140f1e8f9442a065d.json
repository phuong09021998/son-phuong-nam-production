{"ast":null,"code":"import { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/posts';\nimport * as api from '../api/posts';\n\nfunction* getPostsByAdmin() {\n  try {\n    const items = yield call(api.getPostsByAdmin);\n    yield put(actions.getPostsByAdminSuccess({\n      items: items.data.posts\n    }));\n  } catch (error) {\n    yield put(actions.getPostsByAdminError({\n      error: 'Lấy bài viết thất bại'\n    }));\n  }\n}\n\nfunction* watchGetPostsByAdminRequest() {\n  yield takeEvery(actions.Types.GET_POSTS_BY_ADMIN, getPostsByAdmin);\n}\n\nfunction* createPostByAdmin({\n  payload\n}) {\n  try {\n    yield call(api.createPost, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    const errorData = error.response.data;\n\n    if (errorData.error.includes('E11000')) {\n      yield put(actions.createPostError({\n        error: 'Tên bài viết đã tồn tại'\n      }));\n    } else {\n      yield put(actions.createPostError({\n        error: 'Tạo bài viết thất bại'\n      }));\n    }\n  }\n}\n\nfunction* watchCreatePostsByAdminRequest() {\n  yield takeLatest(actions.Types.CREATE_POST, createPostByAdmin);\n}\n\nfunction* deletePost(payload) {\n  try {\n    yield call(api.deletePost, payload);\n    yield call(getPostsByAdmin);\n  } catch (e) {\n    yield put(actions.deletePostError({\n      error: 'Xóa thất bại'\n    }));\n  }\n}\n\nfunction* watchDeletePostRequest() {\n  while (true) {\n    const {\n      payload\n    } = yield take(actions.Types.DELETE_POST);\n    yield call(deletePost, payload);\n  }\n}\n\nfunction* handleUpdatePublish({\n  payload\n}) {\n  try {\n    yield call(api.updatePublish, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    yield put(actions.updatePublishError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdatePublishRequest() {\n  yield takeLatest(actions.Types.UPDATE_PUBLISH, handleUpdatePublish);\n}\n\nfunction* handleUpdatePostRequest({\n  payload\n}) {\n  try {\n    yield call(api.updatePost, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    yield put(actions.updateError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdatePostRequest() {\n  yield takeLatest(actions.Types.UPDATE_POST, handleUpdatePostRequest);\n}\n\nconst postSagas = [fork(watchGetPostsByAdminRequest), fork(watchCreatePostsByAdminRequest), fork(watchDeletePostRequest), fork(watchUpdatePublishRequest), fork(watchUpdatePostRequest)];\nexport default postSagas;","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/redux/sagas/posts.ts"],"names":["takeLatest","takeEvery","take","call","put","fork","actions","api","getPostsByAdmin","items","getPostsByAdminSuccess","data","posts","error","getPostsByAdminError","watchGetPostsByAdminRequest","Types","GET_POSTS_BY_ADMIN","createPostByAdmin","payload","createPost","errorData","response","includes","createPostError","watchCreatePostsByAdminRequest","CREATE_POST","deletePost","e","deletePostError","watchDeletePostRequest","DELETE_POST","handleUpdatePublish","updatePublish","updatePublishError","watchUpdatePublishRequest","UPDATE_PUBLISH","handleUpdatePostRequest","updatePost","updateError","watchUpdatePostRequest","UPDATE_POST","postSagas"],"mappings":"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","sourcesContent":["import { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/posts';\nimport * as api from '../api/posts';\n\nfunction* getPostsByAdmin() {\n  try {\n    const items = yield call(api.getPostsByAdmin);\n    yield put(actions.getPostsByAdminSuccess({ items: items.data.posts }));\n  } catch (error) {\n    yield put(actions.getPostsByAdminError({ error: 'Lấy bài viết thất bại' }));\n  }\n}\n\nfunction* watchGetPostsByAdminRequest() {\n  yield takeEvery(actions.Types.GET_POSTS_BY_ADMIN, getPostsByAdmin);\n}\n\nfunction* createPostByAdmin({ payload }: any) {\n  try {\n    yield call(api.createPost, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    const errorData = error.response.data;\n    if (errorData.error.includes('E11000')) {\n      yield put(actions.createPostError({ error: 'Tên bài viết đã tồn tại' }));\n    } else {\n      yield put(actions.createPostError({ error: 'Tạo bài viết thất bại' }));\n    }\n  }\n}\n\nfunction* watchCreatePostsByAdminRequest() {\n  yield takeLatest(actions.Types.CREATE_POST, createPostByAdmin);\n}\n\nfunction* deletePost(payload: any) {\n  try {\n    yield call(api.deletePost, payload);\n    yield call(getPostsByAdmin);\n  } catch (e) {\n    yield put(actions.deletePostError({ error: 'Xóa thất bại' }));\n  }\n}\n\nfunction* watchDeletePostRequest() {\n  while (true) {\n    const { payload } = yield take(actions.Types.DELETE_POST);\n    yield call(deletePost, payload);\n  }\n}\n\nfunction* handleUpdatePublish({ payload }: any) {\n  try {\n    yield call(api.updatePublish, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    yield put(actions.updatePublishError({ error: 'Cập nhật thất bại' }));\n  }\n}\n\nfunction* watchUpdatePublishRequest() {\n  yield takeLatest(actions.Types.UPDATE_PUBLISH, handleUpdatePublish);\n}\n\nfunction* handleUpdatePostRequest({ payload }: any) {\n  try {\n    yield call(api.updatePost, payload);\n    yield call(getPostsByAdmin);\n  } catch (error) {\n    yield put(actions.updateError({ error: 'Cập nhật thất bại' }));\n  }\n}\n\nfunction* watchUpdatePostRequest() {\n  yield takeLatest(actions.Types.UPDATE_POST, handleUpdatePostRequest);\n}\n\nconst postSagas = [\n  fork(watchGetPostsByAdminRequest),\n  fork(watchCreatePostsByAdminRequest),\n  fork(watchDeletePostRequest),\n  fork(watchUpdatePublishRequest),\n  fork(watchUpdatePostRequest),\n];\n\nexport default postSagas;\n"]},"metadata":{},"sourceType":"module"}