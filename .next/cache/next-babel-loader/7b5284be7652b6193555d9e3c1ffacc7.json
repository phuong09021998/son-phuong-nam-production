{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Types } from '../actions/ui';\nvar INITIAL_STATE = {\n  registerLogin: {\n    isOpen: false,\n    status: 'none'\n  }\n};\nexport default function ui() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.TOGGLE_REGISTER_LOGIN:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          registerLogin: action.payload\n        });\n      }\n\n    case Types.TOGGLE_CHAT_BUBBLE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          openChatBubble: action.payload.isOpen\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/redux/reducers/ui.ts"],"names":["Types","INITIAL_STATE","registerLogin","isOpen","status","ui","state","action","type","TOGGLE_REGISTER_LOGIN","payload","TOGGLE_CHAT_BUBBLE","openChatBubble"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,eAAtB;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EAAE,KADK;AAEbC,IAAAA,MAAM,EAAE;AAFK;AADK,CAAtB;AAYA,eAAe,SAASC,EAAT,GAAmD;AAAA,MAAvCC,KAAuC,uEAA/BL,aAA+B;AAAA,MAAhBM,MAAgB;;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,KAAK,CAACS,qBAAX;AAAkC;AAChC,+CACKH,KADL;AAEEJ,UAAAA,aAAa,EAAEK,MAAM,CAACG;AAFxB;AAID;;AACD,SAAKV,KAAK,CAACW,kBAAX;AAA+B;AAC7B,+CACKL,KADL;AAEEM,UAAAA,cAAc,EAAEL,MAAM,CAACG,OAAP,CAAeP;AAFjC;AAID;;AACD;AAAS;AACP,eAAOG,KAAP;AACD;AAfH;AAiBD","sourcesContent":["import { Types } from '../actions/ui';\n\nconst INITIAL_STATE = {\n  registerLogin: {\n    isOpen: false,\n    status: 'none',\n  },\n};\n\ninterface Action {\n  type: string;\n  payload?: any;\n}\n\nexport default function ui(state = INITIAL_STATE, action: Action) {\n  switch (action.type) {\n    case Types.TOGGLE_REGISTER_LOGIN: {\n      return {\n        ...state,\n        registerLogin: action.payload,\n      };\n    }\n    case Types.TOGGLE_CHAT_BUBBLE: {\n      return {\n        ...state,\n        openChatBubble: action.payload.isOpen,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}