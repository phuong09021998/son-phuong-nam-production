{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Dropdown } from 'antd';\nimport axios from 'config/axios';\nimport styles from './AdminMessages.module.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport UserAvatar from 'components/UserAvatar';\nimport Button from '@material-ui/core/Button';\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\nimport ChatWindow from '../ChatWindow';\nimport scrollToBottom from 'components/utils/scrollBottom'; // @ts-ignore\n\nimport io from 'socket.io-client';\nimport { toggleChatBubble } from 'redux/actions/ui';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport baseUrl from 'config/basedUrl';\nimport localStorage from 'local-storage'; // @ts-ignore\n\nconst token = localStorage.get('spn_auth');\nconst header = {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n};\n\nfunction AdminMessages({\n  toggleChatBubble,\n  openChatWindow\n}) {\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: isOnline,\n    1: setOnline\n  } = useState(false);\n  const {\n    0: currentMessages,\n    1: setCurrentMessages\n  } = useState([]);\n  const {\n    0: currentRoomInfo,\n    1: setCurrentRoomInfo\n  } = useState({\n    roomName: '',\n    roomId: ''\n  });\n  const socketRef = useRef();\n  const {\n    0: activeUsers,\n    1: setActiveUsers\n  } = useState();\n  const {\n    0: openNontification,\n    1: setOpenNontification\n  } = useState(false);\n\n  const sortMessages = messages => {\n    return messages.sort((a, b) => {\n      return b.createdAt - a.createdAt;\n    });\n  };\n\n  useEffect(() => {\n    socketRef.current = io(baseUrl); // @ts-ignore\n\n    socketRef.current.emit('Login', {\n      userId: 'Admin'\n    });\n    axios.get('/messages/admin', header).then(res => {\n      if (res.data.lastChatMessages.length) {\n        // setMessages(res.data.lastChatMessages);\n        setMessages(sortMessages(res.data.lastChatMessages));\n        res.data.lastChatMessages.map(message => {\n          if (!message.seen && message.sender !== 'Admin') {\n            setOpenNontification(true);\n          }\n        }); // @ts-ignore\n      } else {\n        // @ts-ignore\n        setMessages(null);\n      }\n    }); // @ts-ignore\n\n    socketRef.current.on('Chat Message', data => {\n      // @ts-ignore\n      setCurrentMessages(oldMessages => [...oldMessages, data]);\n    }); // @ts-ignore\n\n    socketRef.current.on('Active Users', data => {\n      const dataArr = Object.values(data); // @ts-ignore\n\n      setActiveUsers(dataArr);\n    }); // @ts-ignore\n\n    socketRef.current.on('Admin Last Messages', data => {\n      if (data.sender !== 'Admin') setOpenNontification(true);\n    });\n  }, []);\n\n  const handleCloseChat = () => {\n    toggleChatBubble(false);\n  };\n\n  useEffect(() => {\n    if (openChatWindow) {\n      scrollToBottom();\n    }\n  }, [currentMessages, openChatWindow]);\n\n  const handleOpenWindowChat = (roomId, roomName) => {\n    // axios.post('/messages', { roomId }).then((res) => {\n    // @ts-ignore\n    socketRef.current.emit('Join room', {\n      roomId\n    });\n    setCurrentRoomInfo({\n      roomId: roomId,\n      roomName: roomName\n    }); // @ts-ignore\n\n    socketRef.current.emit('Set seen', {\n      user: roomName,\n      roomId\n    });\n    toggleChatBubble(false);\n    toggleChatBubble(true); // });\n  };\n\n  const handleSetSeen = () => {\n    // @ts-ignore\n    socketRef.current.emit('Set seen', {\n      user: currentRoomInfo.roomName,\n      roomId: currentRoomInfo.roomId\n    });\n    setOpenNontification(false);\n  };\n\n  const handleSendMessage = text => {\n    if (text) {\n      // @ts-ignore\n      socketRef.current.emit('Chat Message', {\n        data: {\n          roomId: currentRoomInfo.roomId,\n          message: text,\n          sender: 'Admin',\n          type: 'text',\n          createdAt: Date.now(),\n          roomName: currentRoomInfo.roomName\n        },\n        roomId: currentRoomInfo.roomId\n      });\n    }\n  };\n\n  const handleLoadMessages = () => {\n    // console.log('load messages');\n    setOpenNontification(false);\n    axios.get('/messages/admin').then(res => {\n      if (res.data.lastChatMessages.length) {\n        // setMessages(res.data.lastChatMessages);\n        setMessages(sortMessages(res.data.lastChatMessages)); // @ts-ignore\n      } else {\n        // @ts-ignore\n        setMessages(null);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (currentRoomInfo.roomId && currentRoomInfo.roomName) {\n      // @ts-ignore\n      setOnline(activeUsers.includes(currentRoomInfo.roomId)); // @ts-ignore\n\n      socketRef.current.on('Set Seen', () => {\n        axios.post('/messages', {\n          roomId: currentRoomInfo.roomId\n        }).then(res => {\n          setCurrentMessages(res.data.messages);\n        });\n      });\n    }\n  }, [currentRoomInfo, activeUsers]);\n\n  const messageDropdown = () => {\n    if (messages === null) {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, __jsx(\"div\", {\n        className: styles.noMessage\n      }, \"Kh\\xF4ng c\\xF3 tin nh\\u1EAFn n\\xE0o\"));\n    } else if (!messages.length) {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, __jsx(\"div\", {\n        className: styles.loading\n      }, __jsx(CircularProgress, {\n        color: \"secondary\",\n        size: 25\n      })));\n    } else {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, messages.map((message, i) => __jsx(\"div\", {\n        className: styles.messageItem,\n        key: i,\n        onClick: () => handleOpenWindowChat(message.roomId, message.roomName)\n      }, __jsx(\"div\", {\n        className: styles.avatar\n      }, __jsx(UserAvatar, {\n        userId: message.roomId,\n        key: i\n      }), activeUsers.includes(message.roomId) && __jsx(\"div\", {\n        className: styles.dot\n      })), __jsx(\"div\", {\n        className: styles.middleMessage\n      }, __jsx(\"div\", {\n        className: styles.name\n      }, message.roomName), __jsx(\"div\", {\n        className: styles.message // @ts-ignore\n        ,\n        style: message.seen || message.sender === 'Admin' ? {\n          color: 'gray'\n        } : null\n      }, message.sender === 'Admin' ? 'Báº¡n: ' : `${message.sender}: `, message.message)), __jsx(\"div\", {\n        className: styles.rightMessage\n      }, moment(message.createdAt).locale('vi').startOf('minute').fromNow()))));\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    overlay: messageDropdown,\n    placement: \"bottomCenter\",\n    trigger: ['click']\n  }, __jsx(Button, {\n    onClick: () => handleLoadMessages()\n  }, __jsx(\"div\", {\n    className: styles.topItem\n  }, __jsx(ModeCommentIcon, null), openNontification && __jsx(\"div\", {\n    className: styles.dot\n  })))), openChatWindow && __jsx(ChatWindow, {\n    user: true,\n    roomInfo: currentRoomInfo,\n    handleSendMessage: handleSendMessage,\n    handleCloseChat: handleCloseChat,\n    messages: currentMessages,\n    isAdmin: true // @ts-ignore\n    ,\n    isOnline: isOnline,\n    handleClick: handleSetSeen\n  }));\n}\n\nconst mapStateToProps = state => ({\n  openChatWindow: state.ui.openChatBubble\n});\n\nexport default connect(mapStateToProps, {\n  toggleChatBubble\n})(AdminMessages);","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/components/AdminMessages/index.tsx"],"names":["React","useEffect","useState","useRef","Dropdown","axios","styles","CircularProgress","UserAvatar","Button","ModeCommentIcon","ChatWindow","scrollToBottom","io","toggleChatBubble","connect","moment","baseUrl","localStorage","token","get","header","headers","AdminMessages","openChatWindow","messages","setMessages","isOnline","setOnline","currentMessages","setCurrentMessages","currentRoomInfo","setCurrentRoomInfo","roomName","roomId","socketRef","activeUsers","setActiveUsers","openNontification","setOpenNontification","sortMessages","sort","a","b","createdAt","current","emit","userId","then","res","data","lastChatMessages","length","map","message","seen","sender","on","oldMessages","dataArr","Object","values","handleCloseChat","handleOpenWindowChat","user","handleSetSeen","handleSendMessage","text","type","Date","now","handleLoadMessages","includes","post","messageDropdown","messagesWrapper","noMessage","loading","i","messageItem","avatar","dot","middleMessage","name","color","rightMessage","locale","startOf","fromNow","topItem","mapStateToProps","state","ui","openChatBubble"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { Dropdown } from 'antd';\nimport axios from 'config/axios';\nimport styles from './AdminMessages.module.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport UserAvatar from 'components/UserAvatar';\nimport Button from '@material-ui/core/Button';\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\nimport ChatWindow from '../ChatWindow';\nimport scrollToBottom from 'components/utils/scrollBottom';\n// @ts-ignore\nimport io from 'socket.io-client';\nimport { toggleChatBubble } from 'redux/actions/ui';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport baseUrl from 'config/basedUrl';\nimport localStorage from 'local-storage';\n// @ts-ignore\nconst token = localStorage.get('spn_auth')\nconst header = {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n}\n\nfunction AdminMessages({ toggleChatBubble, openChatWindow }: any) {\n  const [messages, setMessages] = useState([]);\n  const [isOnline, setOnline] = useState(false);\n  const [currentMessages, setCurrentMessages] = useState([]);\n  const [currentRoomInfo, setCurrentRoomInfo] = useState({\n    roomName: '',\n    roomId: '',\n  });\n  const socketRef = useRef();\n  const [activeUsers, setActiveUsers] = useState();\n  const [openNontification, setOpenNontification] = useState(false);\n\n  const sortMessages = (messages: any) => {\n    return messages.sort((a: any, b: any) => {\n      return b.createdAt - a.createdAt;\n    });\n  };\n\n  useEffect(() => {\n    socketRef.current = io(baseUrl);\n    // @ts-ignore\n    socketRef.current.emit('Login', { userId: 'Admin' });\n\n \n    \n\n    axios.get('/messages/admin', header).then((res: any) => {\n      if (res.data.lastChatMessages.length) {\n        // setMessages(res.data.lastChatMessages);\n        setMessages(sortMessages(res.data.lastChatMessages));\n        res.data.lastChatMessages.map((message: any) => {\n          if (!message.seen && message.sender !== 'Admin') {\n            setOpenNontification(true);\n          }\n        });\n        // @ts-ignore\n      } else {\n        // @ts-ignore\n        setMessages(null);\n      }\n    });\n    // @ts-ignore\n    socketRef.current.on('Chat Message', (data: any) => {\n      // @ts-ignore\n      setCurrentMessages((oldMessages) => [...oldMessages, data]);\n    });\n\n    // @ts-ignore\n    socketRef.current.on('Active Users', (data) => {\n      const dataArr = Object.values(data);\n      // @ts-ignore\n      setActiveUsers(dataArr);\n    });\n\n    // @ts-ignore\n    socketRef.current.on('Admin Last Messages', (data) => {\n      if (data.sender !== 'Admin') setOpenNontification(true);\n    });\n  }, []);\n\n  const handleCloseChat = () => {\n    toggleChatBubble(false);\n  };\n\n  useEffect(() => {\n    if (openChatWindow) {\n      scrollToBottom();\n    }\n  }, [currentMessages, openChatWindow]);\n\n  const handleOpenWindowChat = (roomId: string, roomName: string) => {\n    // axios.post('/messages', { roomId }).then((res) => {\n    // @ts-ignore\n    socketRef.current.emit('Join room', { roomId });\n    setCurrentRoomInfo({\n      roomId: roomId,\n      roomName: roomName,\n    });\n    // @ts-ignore\n    socketRef.current.emit('Set seen', { user: roomName, roomId });\n    toggleChatBubble(false);\n    toggleChatBubble(true);\n    // });\n  };\n\n  const handleSetSeen = () => {\n    // @ts-ignore\n    socketRef.current.emit('Set seen', { user: currentRoomInfo.roomName, roomId: currentRoomInfo.roomId });\n    setOpenNontification(false);\n  };\n\n  const handleSendMessage = (text: any) => {\n    if (text) {\n      // @ts-ignore\n      socketRef.current.emit('Chat Message', {\n        data: {\n          roomId: currentRoomInfo.roomId,\n          message: text,\n          sender: 'Admin',\n          type: 'text',\n          createdAt: Date.now(),\n          roomName: currentRoomInfo.roomName,\n        },\n        roomId: currentRoomInfo.roomId,\n      });\n    }\n  };\n\n  const handleLoadMessages = () => {\n    // console.log('load messages');\n    setOpenNontification(false);\n    axios.get('/messages/admin').then((res: any) => {\n      if (res.data.lastChatMessages.length) {\n        // setMessages(res.data.lastChatMessages);\n        setMessages(sortMessages(res.data.lastChatMessages));\n        // @ts-ignore\n      } else {\n        // @ts-ignore\n        setMessages(null);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (currentRoomInfo.roomId && currentRoomInfo.roomName) {\n      // @ts-ignore\n      setOnline(activeUsers.includes(currentRoomInfo.roomId));\n      // @ts-ignore\n      socketRef.current.on('Set Seen', () => {\n        axios.post('/messages', { roomId: currentRoomInfo.roomId }).then((res) => {\n          setCurrentMessages(res.data.messages);\n        });\n      });\n    }\n  }, [currentRoomInfo, activeUsers]);\n\n  const messageDropdown = () => {\n    if (messages === null) {\n      return (\n        <div className={styles.messagesWrapper}>\n          <div className={styles.noMessage}>KhÃ´ng cÃ³ tin nháº¯n nÃ o</div>\n        </div>\n      );\n    } else if (!messages.length) {\n      return (\n        <div className={styles.messagesWrapper}>\n          <div className={styles.loading}>\n            <CircularProgress color=\"secondary\" size={25} />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className={styles.messagesWrapper}>\n          {messages.map((message: any, i) => (\n            <div\n              className={styles.messageItem}\n              key={i}\n              onClick={() => handleOpenWindowChat(message.roomId, message.roomName)}\n            >\n              <div className={styles.avatar}>\n                {/* @ts-ignore */}\n                <UserAvatar userId={message.roomId} key={i} />\n                {/* @ts-ignore */}\n                {activeUsers.includes(message.roomId) && <div className={styles.dot}></div>}\n              </div>\n              <div className={styles.middleMessage}>\n                <div className={styles.name}>{message.roomName}</div>\n                {/* @ts-ignore */}\n                <div\n                  className={styles.message}\n                  // @ts-ignore\n                  style={message.seen || message.sender === 'Admin' ? { color: 'gray' } : null}\n                >\n                  {message.sender === 'Admin' ? 'Báº¡n: ' : `${message.sender}: `}\n                  {message.message}\n                </div>\n              </div>\n              <div className={styles.rightMessage}>\n                {moment(message.createdAt).locale('vi').startOf('minute').fromNow()}\n              </div>\n            </div>\n          ))}\n        </div>\n      );\n    }\n  };\n  return (\n    <>\n      <Dropdown overlay={messageDropdown} placement=\"bottomCenter\" trigger={['click']}>\n        <Button onClick={() => handleLoadMessages()}>\n          <div className={styles.topItem}>\n            <ModeCommentIcon />\n            {openNontification && <div className={styles.dot}></div>}\n          </div>\n        </Button>\n      </Dropdown>\n      {openChatWindow && (\n        <ChatWindow\n          user={true}\n          roomInfo={currentRoomInfo}\n          handleSendMessage={handleSendMessage}\n          handleCloseChat={handleCloseChat}\n          messages={currentMessages}\n          isAdmin={true}\n          // @ts-ignore\n          isOnline={isOnline}\n          handleClick={handleSetSeen}\n        />\n      )}\n    </>\n  );\n}\n\nconst mapStateToProps = (state: any) => ({\n  openChatWindow: state.ui.openChatBubble,\n});\n\nexport default connect(mapStateToProps, { toggleChatBubble })(AdminMessages);\n"]},"metadata":{},"sourceType":"module"}