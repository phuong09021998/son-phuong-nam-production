{"ast":null,"code":"// @ts-nocheck\n// vendors\nimport { useRef, useCallback, useEffect } from 'react';\nexport default function useDebounce(callback, delay) {\n  var maxWaitArgs = useRef([]);\n  var functionTimeoutHandler = useRef(null);\n  var isComponentUnmounted = useRef(false);\n  var debouncedFunction = callback;\n  useEffect(function () {\n    return function () {\n      // we use flag, as we allow to call callPending outside the hook\n      isComponentUnmounted.current = true;\n    };\n  }, []);\n  var debouncedCallback = useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    maxWaitArgs.current = args;\n    clearTimeout(functionTimeoutHandler.current);\n    functionTimeoutHandler.current = setTimeout(function () {\n      if (!isComponentUnmounted.current) {\n        debouncedFunction.apply(void 0, args);\n      }\n    }, delay);\n  }, [debouncedFunction, delay]); // At the moment, we use 3 args array so that we save backward compatibility\n\n  return [debouncedCallback];\n}","map":null,"metadata":{},"sourceType":"module"}