{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Dropdown } from 'antd';\nimport axios from 'config/axios';\nimport styles from './AdminMessages.module.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport UserAvatar from 'components/UserAvatar';\nimport Button from '@material-ui/core/Button';\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\nimport ChatWindow from '../ChatWindow';\nimport scrollToBottom from 'components/utils/scrollBottom'; // @ts-ignore\n\nimport io from 'socket.io-client';\nimport { toggleChatBubble } from 'redux/actions/ui';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport baseUrl from 'config/basedUrl';\nimport localStorage from 'local-storage'; // @ts-ignore\n\nvar token = localStorage.get('spn_auth');\nvar header = {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n};\n\nfunction AdminMessages(_ref) {\n  var toggleChatBubble = _ref.toggleChatBubble,\n      openChatWindow = _ref.openChatWindow;\n\n  var _useState = useState([]),\n      messages = _useState[0],\n      setMessages = _useState[1];\n\n  var _useState2 = useState(false),\n      isOnline = _useState2[0],\n      setOnline = _useState2[1];\n\n  var _useState3 = useState([]),\n      currentMessages = _useState3[0],\n      setCurrentMessages = _useState3[1];\n\n  var _useState4 = useState({\n    roomName: '',\n    roomId: ''\n  }),\n      currentRoomInfo = _useState4[0],\n      setCurrentRoomInfo = _useState4[1];\n\n  var socketRef = useRef();\n\n  var _useState5 = useState(),\n      activeUsers = _useState5[0],\n      setActiveUsers = _useState5[1];\n\n  var _useState6 = useState(false),\n      openNontification = _useState6[0],\n      setOpenNontification = _useState6[1];\n\n  var sortMessages = function sortMessages(messages) {\n    return messages.sort(function (a, b) {\n      return b.createdAt - a.createdAt;\n    });\n  };\n\n  useEffect(function () {\n    socketRef.current = io(baseUrl); // @ts-ignore\n\n    socketRef.current.emit('Login', {\n      userId: 'Admin'\n    });\n    axios.get('/messages/admin', header).then(function (res) {\n      if (res.data.lastChatMessages.length) {\n        // setMessages(res.data.lastChatMessages);\n        setMessages(sortMessages(res.data.lastChatMessages));\n        res.data.lastChatMessages.map(function (message) {\n          if (!message.seen && message.sender !== 'Admin') {\n            setOpenNontification(true);\n          }\n        }); // @ts-ignore\n      } else {\n        // @ts-ignore\n        setMessages(null);\n      }\n    }); // @ts-ignore\n\n    socketRef.current.on('Chat Message', function (data) {\n      // @ts-ignore\n      setCurrentMessages(function (oldMessages) {\n        return [].concat(_toConsumableArray(oldMessages), [data]);\n      });\n    }); // @ts-ignore\n\n    socketRef.current.on('Active Users', function (data) {\n      var dataArr = Object.values(data); // @ts-ignore\n\n      setActiveUsers(dataArr);\n    }); // @ts-ignore\n\n    socketRef.current.on('Admin Last Messages', function (data) {\n      if (data.sender !== 'Admin') setOpenNontification(true);\n    });\n  }, []);\n\n  var handleCloseChat = function handleCloseChat() {\n    toggleChatBubble(false);\n  };\n\n  useEffect(function () {\n    if (openChatWindow) {\n      scrollToBottom();\n    }\n  }, [currentMessages, openChatWindow]);\n\n  var handleOpenWindowChat = function handleOpenWindowChat(roomId, roomName) {\n    // axios.post('/messages', { roomId }).then((res) => {\n    // @ts-ignore\n    socketRef.current.emit('Join room', {\n      roomId: roomId\n    });\n    setCurrentRoomInfo({\n      roomId: roomId,\n      roomName: roomName\n    }); // @ts-ignore\n\n    socketRef.current.emit('Set seen', {\n      user: roomName,\n      roomId: roomId\n    });\n    toggleChatBubble(false);\n    toggleChatBubble(true); // });\n  };\n\n  var handleSetSeen = function handleSetSeen() {\n    // @ts-ignore\n    socketRef.current.emit('Set seen', {\n      user: currentRoomInfo.roomName,\n      roomId: currentRoomInfo.roomId\n    });\n    setOpenNontification(false);\n  };\n\n  var handleSendMessage = function handleSendMessage(text) {\n    if (text) {\n      // @ts-ignore\n      socketRef.current.emit('Chat Message', {\n        data: {\n          roomId: currentRoomInfo.roomId,\n          message: text,\n          sender: 'Admin',\n          type: 'text',\n          createdAt: Date.now(),\n          roomName: currentRoomInfo.roomName\n        },\n        roomId: currentRoomInfo.roomId\n      });\n    }\n  };\n\n  var handleLoadMessages = function handleLoadMessages() {\n    // console.log('load messages');\n    setOpenNontification(false);\n    axios.get('/messages/admin', header).then(function (res) {\n      if (res.data.lastChatMessages.length) {\n        // setMessages(res.data.lastChatMessages);\n        setMessages(sortMessages(res.data.lastChatMessages)); // @ts-ignore\n      } else {\n        // @ts-ignore\n        setMessages(null);\n      }\n    });\n  };\n\n  useEffect(function () {\n    if (currentRoomInfo.roomId && currentRoomInfo.roomName) {\n      // @ts-ignore\n      setOnline(activeUsers.includes(currentRoomInfo.roomId)); // @ts-ignore\n\n      socketRef.current.on('Set Seen', function () {\n        axios.post('/messages', {\n          roomId: currentRoomInfo.roomId\n        }, header).then(function (res) {\n          setCurrentMessages(res.data.messages);\n        });\n      });\n    }\n  }, [currentRoomInfo, activeUsers]);\n\n  var messageDropdown = function messageDropdown() {\n    if (messages === null) {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, __jsx(\"div\", {\n        className: styles.noMessage\n      }, \"Kh\\xF4ng c\\xF3 tin nh\\u1EAFn n\\xE0o\"));\n    } else if (!messages.length) {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, __jsx(\"div\", {\n        className: styles.loading\n      }, __jsx(CircularProgress, {\n        color: \"secondary\",\n        size: 25\n      })));\n    } else {\n      return __jsx(\"div\", {\n        className: styles.messagesWrapper\n      }, messages.map(function (message, i) {\n        return __jsx(\"div\", {\n          className: styles.messageItem,\n          key: i,\n          onClick: function onClick() {\n            return handleOpenWindowChat(message.roomId, message.roomName);\n          }\n        }, __jsx(\"div\", {\n          className: styles.avatar\n        }, __jsx(UserAvatar, {\n          userId: message.roomId,\n          key: i\n        }), activeUsers.includes(message.roomId) && __jsx(\"div\", {\n          className: styles.dot\n        })), __jsx(\"div\", {\n          className: styles.middleMessage\n        }, __jsx(\"div\", {\n          className: styles.name\n        }, message.roomName), __jsx(\"div\", {\n          className: styles.message // @ts-ignore\n          ,\n          style: message.seen || message.sender === 'Admin' ? {\n            color: 'gray'\n          } : null\n        }, message.sender === 'Admin' ? 'Báº¡n: ' : \"\".concat(message.sender, \": \"), message.message)), __jsx(\"div\", {\n          className: styles.rightMessage\n        }, moment(message.createdAt).locale('vi').startOf('minute').fromNow()));\n      }));\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    overlay: messageDropdown,\n    placement: \"bottomCenter\",\n    trigger: ['click']\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return handleLoadMessages();\n    }\n  }, __jsx(\"div\", {\n    className: styles.topItem\n  }, __jsx(ModeCommentIcon, null), openNontification && __jsx(\"div\", {\n    className: styles.dot\n  })))), openChatWindow && __jsx(ChatWindow, {\n    user: true,\n    roomInfo: currentRoomInfo,\n    handleSendMessage: handleSendMessage,\n    handleCloseChat: handleCloseChat,\n    messages: currentMessages,\n    isAdmin: true // @ts-ignore\n    ,\n    isOnline: isOnline,\n    handleClick: handleSetSeen\n  }));\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    openChatWindow: state.ui.openChatBubble\n  };\n};\n\nexport default connect(mapStateToProps, {\n  toggleChatBubble: toggleChatBubble\n})(AdminMessages);","map":null,"metadata":{},"sourceType":"module"}