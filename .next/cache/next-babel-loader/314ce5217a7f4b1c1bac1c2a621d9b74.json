{"ast":null,"code":"import { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/products';\nimport * as api from '../api/products';\n\nfunction* getProductsByAdmin() {\n  try {\n    const items = yield call(api.getProductsByAdmin); // console.log(items);\n\n    yield put(actions.getProductsByAdminSuccess({\n      items: items.data.products\n    }));\n  } catch (error) {\n    yield put(actions.getProductsByAdminError({\n      error: 'Lấy sản phẩm thất bại'\n    }));\n  }\n}\n\nfunction* watchGetProductsByAdminRequest() {\n  yield takeEvery(actions.Types.GET_PRODUCTS_BY_ADMIN, getProductsByAdmin);\n}\n\nfunction* createProductByAdmin({\n  payload\n}) {\n  try {\n    yield call(api.createProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    const errorData = error.response.data;\n\n    if (errorData.error.includes('E11000')) {\n      yield put(actions.createProductError({\n        error: 'Tên sản phẩm đã tồn tại'\n      }));\n    } else {\n      yield put(actions.createProductError({\n        error: 'Tạo sản phẩm thất bại'\n      }));\n    }\n  }\n}\n\nfunction* watchCreateProductByAdminRequest() {\n  yield takeLatest(actions.Types.CREATE_PRODUCT, createProductByAdmin);\n}\n\nfunction* deleteProduct(payload) {\n  try {\n    yield call(api.deleteProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (e) {\n    yield put(actions.deleteProductError({\n      error: 'Xóa thất bại'\n    }));\n  }\n}\n\nfunction* watchDeleteProductRequest() {\n  while (true) {\n    const {\n      payload\n    } = yield take(actions.Types.DELETE_PRODUCT);\n    yield call(deleteProduct, payload);\n  }\n}\n\nfunction* handleUpdatePublishProduct({\n  payload\n}) {\n  try {\n    yield call(api.updatePublishProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updatePublishProductError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdatePublishProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_PUBLISH_PRODUCT, handleUpdatePublishProduct);\n}\n\nfunction* handleUpdateAvailableProduct({\n  payload\n}) {\n  try {\n    yield call(api.updateAvailableProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updateAvailableProductError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateAvailableProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_AVAILABLE, handleUpdateAvailableProduct);\n}\n\nfunction* handleUpdateProductRequest({\n  payload\n}) {\n  try {\n    yield call(api.updateProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updateProductError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_PRODUCT, handleUpdateProductRequest);\n}\n\nconst productSagas = [fork(watchGetProductsByAdminRequest), fork(watchCreateProductByAdminRequest), fork(watchDeleteProductRequest), fork(watchUpdatePublishProductRequest), fork(watchUpdateAvailableProductRequest), fork(watchUpdateProductRequest)];\nexport default productSagas;","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/redux/sagas/products.ts"],"names":["takeLatest","takeEvery","take","call","put","fork","actions","api","getProductsByAdmin","items","getProductsByAdminSuccess","data","products","error","getProductsByAdminError","watchGetProductsByAdminRequest","Types","GET_PRODUCTS_BY_ADMIN","createProductByAdmin","payload","createProduct","errorData","response","includes","createProductError","watchCreateProductByAdminRequest","CREATE_PRODUCT","deleteProduct","e","deleteProductError","watchDeleteProductRequest","DELETE_PRODUCT","handleUpdatePublishProduct","updatePublishProduct","updatePublishProductError","watchUpdatePublishProductRequest","UPDATE_PUBLISH_PRODUCT","handleUpdateAvailableProduct","updateAvailableProduct","updateAvailableProductError","watchUpdateAvailableProductRequest","UPDATE_AVAILABLE","handleUpdateProductRequest","updateProduct","updateProductError","watchUpdateProductRequest","UPDATE_PRODUCT","productSagas"],"mappings":"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","sourcesContent":["import { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/products';\nimport * as api from '../api/products';\n\nfunction* getProductsByAdmin() {\n  try {\n    const items = yield call(api.getProductsByAdmin);\n    // console.log(items);\n    yield put(actions.getProductsByAdminSuccess({ items: items.data.products }));\n  } catch (error) {\n    yield put(actions.getProductsByAdminError({ error: 'Lấy sản phẩm thất bại' }));\n  }\n}\n\nfunction* watchGetProductsByAdminRequest() {\n  yield takeEvery(actions.Types.GET_PRODUCTS_BY_ADMIN, getProductsByAdmin);\n}\n\nfunction* createProductByAdmin({ payload }: any) {\n  try {\n    yield call(api.createProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    const errorData = error.response.data;\n    if (errorData.error.includes('E11000')) {\n      yield put(actions.createProductError({ error: 'Tên sản phẩm đã tồn tại' }));\n    } else {\n      yield put(actions.createProductError({ error: 'Tạo sản phẩm thất bại' }));\n    }\n  }\n}\n\nfunction* watchCreateProductByAdminRequest() {\n  yield takeLatest(actions.Types.CREATE_PRODUCT, createProductByAdmin);\n}\n\nfunction* deleteProduct(payload: any) {\n  try {\n    yield call(api.deleteProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (e) {\n    yield put(actions.deleteProductError({ error: 'Xóa thất bại' }));\n  }\n}\n\nfunction* watchDeleteProductRequest() {\n  while (true) {\n    const { payload } = yield take(actions.Types.DELETE_PRODUCT);\n    yield call(deleteProduct, payload);\n  }\n}\n\nfunction* handleUpdatePublishProduct({ payload }: any) {\n  try {\n    yield call(api.updatePublishProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updatePublishProductError({ error: 'Cập nhật thất bại' }));\n  }\n}\n\nfunction* watchUpdatePublishProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_PUBLISH_PRODUCT, handleUpdatePublishProduct);\n}\n\nfunction* handleUpdateAvailableProduct({ payload }: any) {\n  try {\n    yield call(api.updateAvailableProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updateAvailableProductError({ error: 'Cập nhật thất bại' }));\n  }\n}\n\nfunction* watchUpdateAvailableProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_AVAILABLE, handleUpdateAvailableProduct);\n}\n\nfunction* handleUpdateProductRequest({ payload }: any) {\n  try {\n    yield call(api.updateProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updateProductError({ error: 'Cập nhật thất bại' }));\n  }\n}\n\nfunction* watchUpdateProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_PRODUCT, handleUpdateProductRequest);\n}\n\nconst productSagas = [\n  fork(watchGetProductsByAdminRequest),\n  fork(watchCreateProductByAdminRequest),\n  fork(watchDeleteProductRequest),\n  fork(watchUpdatePublishProductRequest),\n  fork(watchUpdateAvailableProductRequest),\n  fork(watchUpdateProductRequest),\n];\n\nexport default productSagas;\n"]},"metadata":{},"sourceType":"module"}