{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getUser } from 'redux/actions/users';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { withRouter } from 'next/router';\n\nconst antIcon = __jsx(LoadingOutlined, {\n  style: {\n    fontSize: 50\n  },\n  spin: true\n});\n\nexport default function Auth(ComposedClass, adminRoute = false) {\n  class AuthenticationCheck extends Component {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"state\", {\n        loading: true\n      });\n    }\n\n    componentDidMount() {\n      const {\n        getUser\n      } = this.props;\n      getUser();\n    }\n\n    componentDidUpdate() {\n      const {\n        user,\n        router,\n        getUserError\n      } = this.props;\n      const {\n        loading\n      } = this.state; // console.log(getUserError);\n\n      if (getUserError) {\n        router.push('/');\n      }\n\n      if (adminRoute && loading && user) {\n        if (user.role < 1) {\n          router.push('/');\n        } else {\n          return this.setState({\n            loading: false\n          });\n        }\n      } else if (!adminRoute && loading && user) {\n        return this.setState({\n          loading: false\n        });\n      }\n    }\n\n    render() {\n      const {\n        user\n      } = this.props;\n      const {\n        loading\n      } = this.state;\n\n      if (loading) {\n        return __jsx(\"div\", {\n          style: {\n            width: '100%',\n            marginTop: '10em',\n            textAlign: 'center'\n          }\n        }, __jsx(Spin, {\n          indicator: antIcon\n        }));\n      }\n\n      return __jsx(ComposedClass, _extends({}, this.props, {\n        user: user\n      }));\n    }\n\n  }\n\n  function mapStateToProps(state) {\n    return {\n      user: state.users.data,\n      getUserError: state.users.getUserError\n    };\n  }\n\n  return connect(mapStateToProps, {\n    getUser\n  })(withRouter(AuthenticationCheck));\n}","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/components/utils/privateRoute.tsx"],"names":["React","Component","connect","getUser","Spin","LoadingOutlined","withRouter","antIcon","fontSize","Auth","ComposedClass","adminRoute","AuthenticationCheck","loading","componentDidMount","props","componentDidUpdate","user","router","getUserError","state","push","role","setState","render","width","marginTop","textAlign","mapStateToProps","users","data"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAEA,MAAMC,OAAO,GAAG,MAAC,eAAD;AAAiB,EAAA,KAAK,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAxB;AAA0C,EAAA,IAAI;AAA9C,EAAhB;;AAEA,eAAe,SAASC,IAAT,CAAcC,aAAd,EAAkCC,UAAU,GAAG,KAA/C,EAAsD;AACnE,QAAMC,mBAAN,SAAkCX,SAAlC,CAA4C;AAAA;AAAA;;AAAA,qCAClC;AACNY,QAAAA,OAAO,EAAE;AADH,OADkC;AAAA;;AAK1CC,IAAAA,iBAAiB,GAAG;AAClB,YAAM;AAAEX,QAAAA;AAAF,UAAmB,KAAKY,KAA9B;AACAZ,MAAAA,OAAO;AACR;;AAEDa,IAAAA,kBAAkB,GAAG;AACnB,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,MAAR;AAAgBC,QAAAA;AAAhB,UAAsC,KAAKJ,KAAjD;AACA,YAAM;AAAEF,QAAAA;AAAF,UAAc,KAAKO,KAAzB,CAFmB,CAGnB;;AACA,UAAID,YAAJ,EAAkB;AAChBD,QAAAA,MAAM,CAACG,IAAP,CAAY,GAAZ;AACD;;AAED,UAAIV,UAAU,IAAIE,OAAd,IAAyBI,IAA7B,EAAmC;AACjC,YAAIA,IAAI,CAACK,IAAL,GAAY,CAAhB,EAAmB;AACjBJ,UAAAA,MAAM,CAACG,IAAP,CAAY,GAAZ;AACD,SAFD,MAEO;AACL,iBAAO,KAAKE,QAAL,CAAc;AAAEV,YAAAA,OAAO,EAAE;AAAX,WAAd,CAAP;AACD;AACF,OAND,MAMO,IAAI,CAACF,UAAD,IAAeE,OAAf,IAA0BI,IAA9B,EAAoC;AACzC,eAAO,KAAKM,QAAL,CAAc;AAAEV,UAAAA,OAAO,EAAE;AAAX,SAAd,CAAP;AACD;AACF;;AAEDW,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEP,QAAAA;AAAF,UAAgB,KAAKF,KAA3B;AACA,YAAM;AAAEF,QAAAA;AAAF,UAAc,KAAKO,KAAzB;;AAEA,UAAIP,OAAJ,EAAa;AACX,eACE;AACE,UAAA,KAAK,EAAE;AACLY,YAAAA,KAAK,EAAE,MADF;AAELC,YAAAA,SAAS,EAAE,MAFN;AAGLC,YAAAA,SAAS,EAAE;AAHN;AADT,WAOE,MAAC,IAAD;AAAM,UAAA,SAAS,EAAEpB;AAAjB,UAPF,CADF;AAWD;;AAED,aAAO,MAAC,aAAD,eAAmB,KAAKQ,KAAxB;AAA+B,QAAA,IAAI,EAAEE;AAArC,SAAP;AACD;;AAhDyC;;AAmD5C,WAASW,eAAT,CAAyBR,KAAzB,EAAqC;AACnC,WAAO;AACLH,MAAAA,IAAI,EAAEG,KAAK,CAACS,KAAN,CAAYC,IADb;AAELX,MAAAA,YAAY,EAAEC,KAAK,CAACS,KAAN,CAAYV;AAFrB,KAAP;AAID;;AAED,SAAOjB,OAAO,CAAC0B,eAAD,EAAkB;AAAEzB,IAAAA;AAAF,GAAlB,CAAP,CAAsCG,UAAU,CAACM,mBAAD,CAAhD,CAAP;AACD","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getUser } from 'redux/actions/users';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { withRouter } from 'next/router';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 50 }} spin />;\n\nexport default function Auth(ComposedClass: any, adminRoute = false) {\n  class AuthenticationCheck extends Component {\n    state = {\n      loading: true,\n    };\n\n    componentDidMount() {\n      const { getUser }: any = this.props;\n      getUser();\n    }\n\n    componentDidUpdate() {\n      const { user, router, getUserError }: any = this.props;\n      const { loading } = this.state;\n      // console.log(getUserError);\n      if (getUserError) {\n        router.push('/');\n      }\n\n      if (adminRoute && loading && user) {\n        if (user.role < 1) {\n          router.push('/');\n        } else {\n          return this.setState({ loading: false });\n        }\n      } else if (!adminRoute && loading && user) {\n        return this.setState({ loading: false });\n      }\n    }\n\n    render() {\n      const { user }: any = this.props;\n      const { loading } = this.state;\n\n      if (loading) {\n        return (\n          <div\n            style={{\n              width: '100%',\n              marginTop: '10em',\n              textAlign: 'center',\n            }}\n          >\n            <Spin indicator={antIcon} />\n          </div>\n        );\n      }\n\n      return <ComposedClass {...this.props} user={user} />;\n    }\n  }\n\n  function mapStateToProps(state: any) {\n    return {\n      user: state.users.data,\n      getUserError: state.users.getUserError,\n    };\n  }\n\n  return connect(mapStateToProps, { getUser })(withRouter(AuthenticationCheck as any));\n}\n"]},"metadata":{},"sourceType":"module"}