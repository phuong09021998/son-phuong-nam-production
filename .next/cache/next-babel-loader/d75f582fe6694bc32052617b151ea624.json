{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef } from 'react';\nimport styles from './ChatBubble.module.scss';\nimport { connect } from 'react-redux';\nimport { toggleChatBubble } from 'redux/actions/ui';\nimport { toggleRegisterLogin } from 'redux/actions/ui';\nimport ChatWindow from '../ChatWindow'; // @ts-ignore\n\nimport io from 'socket.io-client';\nimport scrollToBottom from 'components/utils/scrollBottom';\nimport { message } from 'antd';\nimport axios from 'config/axios';\nimport baseUrl from 'config/basedUrl';\n\nfunction ChatBubble({\n  openChatBubble,\n  toggleChatBubble,\n  user,\n  toggleRegisterLogin\n}) {\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: isOnline,\n    1: setOnline\n  } = useState(false);\n  const socketRef = useRef();\n\n  const handleOpenChat = () => {\n    toggleChatBubble(true);\n\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Set seen', {\n        user: 'Admin',\n        roomId: user._id\n      });\n    }\n  };\n\n  const handleCloseChat = () => {\n    toggleChatBubble(false);\n  };\n\n  const handleOpenLogin = () => {\n    toggleRegisterLogin(true, 'login');\n  };\n\n  const handleSendMessage = text => {\n    if (text) {\n      // @ts-ignore\n      socketRef.current.emit('Chat Message', {\n        data: {\n          roomId: user._id,\n          message: text,\n          sender: user.name,\n          type: 'text',\n          createdAt: Date.now(),\n          roomName: user.name\n        },\n        roomId: user._id\n      }); // @ts-ignore\n    }\n  };\n\n  useEffect(() => {\n    socketRef.current = io(baseUrl);\n\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Login', {\n        userId: user._id\n      }); // @ts-ignore\n\n      socketRef.current.emit('Join room', {\n        roomId: user._id\n      });\n\n      try {\n        axios.post('/messages', {\n          roomId: user._id\n        }).then(res => {\n          if (res.data.messages.length) {\n            setMessages(res.data.messages); // console.log(res.data.messages);\n          } else {\n            // @ts-ignore\n            socketRef.current.emit('Initialize Chat', {\n              roomId: user._id,\n              roomName: user.name\n            });\n          }\n        });\n      } catch (error) {\n        message.error(error.response.error);\n      } // @ts-ignore\n\n\n      socketRef.current.on('Chat Message', msg => {\n        // @ts-ignore\n        setMessages(oldMessages => [...oldMessages, msg]);\n      }); // @ts-ignore\n\n      socketRef.current.on('Chat Error', err => {\n        message.error(err.response);\n      }); // @ts-ignore\n\n      socketRef.current.on('Active Users', data => {\n        const dataArr = Object.values(data);\n\n        if (dataArr.includes('Admin')) {\n          setOnline(true);\n        } else {\n          setOnline(false);\n        }\n      }); // @ts-ignore\n\n      socketRef.current.on('Set Seen', () => {\n        axios.post('/messages', {\n          roomId: user._id\n        }).then(res => {\n          setMessages(res.data.messages);\n        });\n      });\n    } else {\n      toggleChatBubble(false);\n    }\n  }, [user]);\n\n  const handleSetSeen = () => {\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Set seen', {\n        user: 'Admin',\n        roomId: user._id\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (openChatBubble) {\n      scrollToBottom();\n    }\n  }, [messages, openChatBubble]);\n  return __jsx(React.Fragment, null, openChatBubble ? __jsx(ChatWindow, {\n    user: user,\n    handleOpenLogin: handleOpenLogin,\n    handleSendMessage: handleSendMessage,\n    handleCloseChat: handleCloseChat,\n    messages: messages,\n    isOnline: isOnline,\n    roomInfo: true,\n    handleClick: handleSetSeen\n  }) : __jsx(\"div\", {\n    className: styles.icon,\n    onClick: handleOpenChat\n  }, __jsx(\"img\", {\n    src: \"/icons/chat.svg\",\n    alt: \"chat\"\n  })));\n}\n\nconst mapStateToProps = state => ({\n  openChatBubble: state.ui.openChatBubble,\n  user: state.users.data\n});\n\nexport default connect(mapStateToProps, {\n  toggleChatBubble,\n  toggleRegisterLogin\n})(ChatBubble);","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/components/ClientChatBubble/index.tsx"],"names":["React","useState","useEffect","useRef","styles","connect","toggleChatBubble","toggleRegisterLogin","ChatWindow","io","scrollToBottom","message","axios","baseUrl","ChatBubble","openChatBubble","user","messages","setMessages","isOnline","setOnline","socketRef","handleOpenChat","current","emit","roomId","_id","handleCloseChat","handleOpenLogin","handleSendMessage","text","data","sender","name","type","createdAt","Date","now","roomName","userId","post","then","res","length","error","response","on","msg","oldMessages","err","dataArr","Object","values","includes","handleSetSeen","icon","mapStateToProps","state","ui","users"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styles from './ChatBubble.module.scss';\nimport { connect } from 'react-redux';\nimport { toggleChatBubble } from 'redux/actions/ui';\nimport { toggleRegisterLogin } from 'redux/actions/ui';\nimport ChatWindow from '../ChatWindow';\n// @ts-ignore\nimport io from 'socket.io-client';\nimport scrollToBottom from 'components/utils/scrollBottom';\nimport { message } from 'antd';\nimport axios from 'config/axios';\nimport baseUrl from 'config/basedUrl';\n\nfunction ChatBubble({ openChatBubble, toggleChatBubble, user, toggleRegisterLogin }: any) {\n  const [messages, setMessages] = useState([]);\n  const [isOnline, setOnline] = useState(false);\n  const socketRef = useRef();\n\n  const handleOpenChat = () => {\n    toggleChatBubble(true);\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Set seen', { user: 'Admin', roomId: user._id });\n    }\n  };\n\n  const handleCloseChat = () => {\n    toggleChatBubble(false);\n  };\n\n  const handleOpenLogin = () => {\n    toggleRegisterLogin(true, 'login');\n  };\n\n  const handleSendMessage = (text: any) => {\n    if (text) {\n      // @ts-ignore\n      socketRef.current.emit('Chat Message', {\n        data: {\n          roomId: user._id,\n          message: text,\n          sender: user.name,\n          type: 'text',\n          createdAt: Date.now(),\n          roomName: user.name,\n        },\n        roomId: user._id,\n      });\n      // @ts-ignore\n    }\n  };\n\n  useEffect(() => {\n    socketRef.current = io(baseUrl);\n\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Login', { userId: user._id });\n      // @ts-ignore\n      socketRef.current.emit('Join room', { roomId: user._id });\n\n      try {\n        axios.post('/messages', { roomId: user._id }).then((res) => {\n          if (res.data.messages.length) {\n            setMessages(res.data.messages);\n            // console.log(res.data.messages);\n          } else {\n            // @ts-ignore\n            socketRef.current.emit('Initialize Chat', { roomId: user._id, roomName: user.name });\n          }\n        });\n      } catch (error) {\n        message.error(error.response.error);\n      }\n\n      // @ts-ignore\n      socketRef.current.on('Chat Message', (msg: any) => {\n        // @ts-ignore\n        setMessages((oldMessages) => [...oldMessages, msg]);\n      });\n      // @ts-ignore\n      socketRef.current.on('Chat Error', (err: any) => {\n        message.error(err.response);\n      });\n\n      // @ts-ignore\n      socketRef.current.on('Active Users', (data) => {\n        const dataArr = Object.values(data);\n        if (dataArr.includes('Admin')) {\n          setOnline(true);\n        } else {\n          setOnline(false);\n        }\n      });\n      // @ts-ignore\n      socketRef.current.on('Set Seen', () => {\n        axios.post('/messages', { roomId: user._id }).then((res) => {\n          setMessages(res.data.messages);\n        });\n      });\n    } else {\n      toggleChatBubble(false);\n    }\n  }, [user]);\n\n  const handleSetSeen = () => {\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Set seen', { user: 'Admin', roomId: user._id });\n    }\n  };\n\n  useEffect(() => {\n    if (openChatBubble) {\n      scrollToBottom();\n    }\n  }, [messages, openChatBubble]);\n\n  return (\n    <React.Fragment>\n      {openChatBubble ? (\n        <ChatWindow\n          user={user}\n          handleOpenLogin={handleOpenLogin}\n          handleSendMessage={handleSendMessage}\n          handleCloseChat={handleCloseChat}\n          messages={messages}\n          isOnline={isOnline}\n          roomInfo={true}\n          handleClick={handleSetSeen}\n        />\n      ) : (\n        <div className={styles.icon} onClick={handleOpenChat}>\n          <img src=\"/icons/chat.svg\" alt=\"chat\" />\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = (state: any) => ({\n  openChatBubble: state.ui.openChatBubble,\n  user: state.users.data,\n});\n\nexport default connect(mapStateToProps, { toggleChatBubble, toggleRegisterLogin })(ChatBubble);\n"]},"metadata":{},"sourceType":"module"}