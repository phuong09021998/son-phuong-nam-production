{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getProductsByAdmin, createProduct, deleteProduct, updatePublish, updateProduct, updateAvailable } from 'redux/actions/products';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport styles from './AdminPosts.module.scss';\nimport TopAdminTable from '../TopAdminTable';\nimport { Table, Space, Popconfirm, message, Switch } from 'antd';\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\nimport FormField from '../FormField';\nimport Button from '@material-ui/core/Button';\nimport { update, generateData, isFormValid } from 'components/utils/formAction'; // @ts-ignore\n\nimport currencyFormatter from 'currency-formatter';\n\nfunction AdminProducts({\n  products,\n  getProductsByAdmin,\n  createProduct,\n  deleteProduct,\n  getProductsError,\n  createProductError,\n  deleteProductError,\n  updatePublish,\n  updateProduct,\n  updatePublishError,\n  updateProductError,\n  updateAvailableError,\n  updateAvailable\n}) {\n  const initialForm = {\n    formError: false,\n    formMessage: '',\n    formdata: {\n      name: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'name_input',\n          type: 'text',\n          // placeholder: 'Email',\n          label: 'Tên sản phẩm'\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      },\n      image: {\n        element: 'image',\n        value: '',\n        config: {\n          label: 'Ảnh đại diện',\n          placeholder: ''\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        showlabel: true,\n        touched: true,\n        validationMessage: 'Bạn phải nhập mục này'\n      },\n      price: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'price_input',\n          type: 'number',\n          // placeholder: 'Email',\n          label: 'Giá'\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      },\n      salePrice: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'sale_price_input',\n          type: 'number',\n          // placeholder: 'Email',\n          label: 'Giá khuyến mãi'\n        },\n        validation: {\n          required: false\n        },\n        valid: true,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      }\n    }\n  };\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: edit,\n    1: setEdit\n  } = useState({\n    active: false,\n    status: 'none'\n  });\n  const {\n    0: form,\n    1: setForm\n  } = useState(initialForm);\n  const {\n    0: isWaiting,\n    1: setWaiting\n  } = useState(false);\n  const columns = [{\n    title: 'Tên sản phẩm',\n    dataIndex: 'name',\n    key: 'name'\n  }, {\n    title: 'Giá',\n    dataIndex: 'price',\n    key: 'price',\n    // @ts-ignore\n    render: (price, doc) => {\n      if (doc.salePrice) {\n        return currencyFormatter.format(doc.salePrice, {\n          code: 'VND'\n        });\n      } else {\n        return currencyFormatter.format(doc.price, {\n          code: 'VND'\n        });\n      }\n    }\n  }, {\n    title: 'Xuất bản',\n    dataIndex: 'publish',\n    key: 'publish',\n    render: (publish, record) => __jsx(Switch, {\n      defaultChecked: publish,\n      checkedChildren: __jsx(CheckOutlined, null),\n      unCheckedChildren: __jsx(CloseOutlined, null),\n      onChange: check => handleSwitchChange(check, record._id)\n    })\n  }, {\n    title: 'Hết hàng / Có sẵn',\n    dataIndex: 'available',\n    key: 'available',\n    render: (available, record) => __jsx(Switch, {\n      defaultChecked: available,\n      checkedChildren: __jsx(CheckOutlined, null),\n      unCheckedChildren: __jsx(CloseOutlined, null),\n      onChange: check => handleSwitchAvailableChange(check, record._id)\n    })\n  }, {\n    title: 'Hành động',\n    key: 'action',\n    render: record => __jsx(Space, {\n      size: \"middle\"\n    }, __jsx(\"a\", {\n      onClick: e => handleEdit(e, record.urlTitle)\n    }, \"S\\u1EEDa\"), __jsx(Popconfirm, {\n      title: \"B\\u1EA1n c\\xF3 mu\\u1ED1n s\\u1EA3n ph\\u1EA9m n\\xE0y?\",\n      onConfirm: () => handleDelete(record._id),\n      okText: \"X\\xF3a\",\n      cancelText: \"Kh\\xF4ng\"\n    }, __jsx(\"a\", null, \"X\\xF3a\")))\n  }]; // @ts-ignore\n\n  const handleEdit = (e, urlTitle) => {\n    const productsArr = Object.values(products);\n    const selectedProduct = productsArr.find(product => product.urlTitle === urlTitle);\n    setEdit({\n      active: true,\n      status: selectedProduct._id\n    });\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      formdata: _objectSpread(_objectSpread({}, form.formdata), {}, {\n        name: _objectSpread(_objectSpread({}, form.formdata.name), {}, {\n          value: selectedProduct.name,\n          valid: true\n        }),\n        price: _objectSpread(_objectSpread({}, form.formdata.price), {}, {\n          value: selectedProduct.price,\n          valid: true\n        }),\n        salePrice: _objectSpread(_objectSpread({}, form.formdata.salePrice), {}, {\n          value: selectedProduct.salePrice,\n          valid: true\n        }),\n        image: _objectSpread(_objectSpread({}, form.formdata.image), {}, {\n          value: `/api/product/image/${urlTitle}`,\n          valid: true\n        })\n      })\n    }));\n  };\n\n  const handleSwitchChange = (check, id) => {\n    updatePublish({\n      publish: check,\n      id\n    });\n  };\n\n  const handleSwitchAvailableChange = (check, id) => {\n    updateAvailable({\n      available: check,\n      id\n    });\n  };\n\n  const handleDelete = id => {\n    deleteProduct({\n      id\n    });\n  };\n\n  const handleCreatePost = () => {\n    setEdit({\n      active: true,\n      status: 'create'\n    });\n    setWaiting(false);\n    setForm(initialForm);\n  };\n\n  const updateForm = element => {\n    const newFormdata = update(element, form.formdata, 'posts');\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      formError: false,\n      formdata: newFormdata\n    }));\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n    const dataToSubmit = generateData(form.formdata, 'posts');\n    const formIsValid = isFormValid(form.formdata, 'posts');\n\n    if (formIsValid) {\n      setWaiting(true);\n\n      if (edit.active && edit.status === 'create') {\n        createProduct(dataToSubmit);\n      } else {\n        console.log(dataToSubmit);\n        updateProduct(_objectSpread(_objectSpread({}, dataToSubmit), {}, {\n          id: edit.status\n        }));\n      }\n    } else {\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        formError: true,\n        formMessage: 'Kiểm tra lại thông tin'\n      }));\n    }\n  };\n\n  const exitForm = e => {\n    e.preventDefault();\n    setEdit({\n      active: false,\n      status: 'none'\n    });\n    setWaiting(false);\n  };\n\n  useEffect(() => {\n    getProductsByAdmin();\n  }, []);\n  useEffect(() => {\n    if (getProductsError) {\n      message.error(getProductsError);\n    }\n  }, [getProductsError]);\n  useEffect(() => {\n    if (deleteProductError) {\n      message.error(deleteProductError);\n    }\n  }, [deleteProductError]);\n  useEffect(() => {\n    if (updatePublishError) {\n      message.error(updatePublishError);\n    }\n  }, [updatePublishError]);\n  useEffect(() => {\n    if (updateAvailableError) {\n      message.error(updateAvailableError);\n    }\n  }, [updateAvailableError]);\n  useEffect(() => {\n    if (updateProductError) {\n      message.error(updateProductError);\n    }\n  }, [updateProductError]);\n  useEffect(() => {\n    if (createProductError) {\n      setWaiting(false);\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        formdata: _objectSpread(_objectSpread({}, form.formdata), {}, {\n          name: _objectSpread(_objectSpread({}, form.formdata.name), {}, {\n            valid: false,\n            validationMessage: 'Tên sản phẩm đã tồn tại'\n          })\n        })\n      }));\n    }\n  }, [createProductError]);\n  useEffect(() => {\n    if (products) {\n      setLoading(false);\n      setWaiting(false);\n      setEdit({\n        active: false,\n        status: 'none'\n      });\n    }\n  }, [products]);\n\n  if (loading) {\n    return __jsx(\"div\", {\n      className: styles.loading\n    }, __jsx(CircularProgress, {\n      size: 50,\n      thickness: 4\n    }));\n  } else if (edit.active) {\n    return __jsx(\"div\", {\n      className: styles.formContainer\n    }, __jsx(\"form\", null, __jsx(\"div\", {\n      className: styles.title,\n      onSubmit: event => submitForm(event)\n    }, edit.status === 'create' ? 'Thêm sản phẩm' : 'Sửa sản phẩm'), __jsx(FormField, {\n      id: 'name',\n      formdata: form.formdata.name,\n      change: e => updateForm(e)\n    }), __jsx(FormField, {\n      id: 'price',\n      formdata: form.formdata.price,\n      change: e => updateForm(e)\n    }), __jsx(FormField, {\n      id: 'image',\n      formdata: form.formdata.image,\n      change: e => updateForm(e)\n    }), __jsx(FormField, {\n      id: 'salePrice',\n      formdata: form.formdata.salePrice,\n      change: e => updateForm(e)\n    }), form.formError && __jsx(\"div\", {\n      className: styles.errorLabel\n    }, form.formMessage), isWaiting && __jsx(\"div\", {\n      className: styles.waiting\n    }, __jsx(CircularProgress, {\n      color: \"secondary\"\n    })), __jsx(\"div\", {\n      className: styles.buttonWrapper\n    }, __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: styles.button,\n      onClick: event => exitForm(event)\n    }, \"H\\u1EE7y\"), __jsx(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: styles.button,\n      onClick: event => submitForm(event),\n      type: \"submit\"\n    }, \"X\\xE1c nh\\u1EADn\"))));\n  } else {\n    return __jsx(\"div\", {\n      className: styles.container\n    }, __jsx(\"div\", {\n      className: styles.topWrapper\n    }, __jsx(TopAdminTable, {\n      handleCreate: handleCreatePost\n    })), __jsx(\"div\", {\n      className: styles.tableWrapper\n    }, __jsx(Table, {\n      columns: columns,\n      dataSource: products,\n      rowKey: record => record._id\n    })));\n  }\n}\n\nconst mapStateToProps = state => ({\n  products: state.products.productsByAdmin,\n  getProductsError: state.products.getProductsByAdminError,\n  createProductError: state.products.createProductError,\n  deleteProductError: state.products.deleteProductError,\n  updatePublishError: state.products.updatePublishProductError,\n  updateProductError: state.products.updateProductError,\n  updateAvailableError: state.products.updateAvailableProductError\n});\n\nexport default connect(mapStateToProps, {\n  getProductsByAdmin,\n  createProduct,\n  deleteProduct,\n  updatePublish,\n  updateProduct,\n  updateAvailable\n})(AdminProducts);","map":null,"metadata":{},"sourceType":"module"}