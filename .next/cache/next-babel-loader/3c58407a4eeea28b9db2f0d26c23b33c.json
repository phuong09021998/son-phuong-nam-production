{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { update, generateData, isFormValid } from '../../utils/formAction';\nimport FormField from '../../FormField';\nimport styles from './Login.module.scss';\nimport Button from '@material-ui/core/Button';\nimport { loginUser, loginByGoogle, loginByFacebook } from 'redux/actions/users';\nimport { connect } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport GoogleLogin from 'react-google-login';\nimport { message } from 'antd';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // @ts-ignore\n\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\n\nfunction Login({\n  user,\n  loginUser,\n  close,\n  loginByGoogle,\n  loginByGoogleError,\n  loginUserError,\n  loginByFacebookError,\n  loginByFacebook\n}) {\n  const router = useRouter();\n  const {\n    0: form,\n    1: setForm\n  } = useState({\n    formError: false,\n    formSuccess: '',\n    formdata: {\n      email: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'email_input',\n          type: 'email',\n          placeholder: 'Email'\n        },\n        validation: {\n          required: true,\n          email: true\n        },\n        valid: false,\n        touched: false,\n        validationMessage: ''\n      },\n      password: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'password_input',\n          type: 'password',\n          placeholder: 'Mật khẩu'\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        validationMessage: ''\n      }\n    }\n  });\n  const {\n    0: waiting,\n    1: setWaiting\n  } = useState(false);\n\n  const userIcon = () => __jsx(\"img\", {\n    src: \"/icons/user.svg\",\n    alt: \"user\"\n  });\n\n  const passwordIcon = () => __jsx(\"img\", {\n    src: \"/icons/password.svg\",\n    alt: \"password\"\n  });\n\n  const updateForm = element => {\n    const newFormdata = update(element, form.formdata, 'login');\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      formError: false,\n      formdata: newFormdata\n    }));\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n    const dataToSubmit = generateData(form.formdata, 'login');\n    const formIsValid = isFormValid(form.formdata, 'login'); // console.log(form.formdata);\n\n    if (formIsValid) {\n      loginUser(dataToSubmit);\n      setWaiting(true);\n    } else {\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        formError: true\n      }));\n    }\n  };\n\n  const responseGoogle = data => {\n    loginByGoogle({\n      token: data.tokenId,\n      name: data.profileObj.name,\n      thirdPartyAvatar: data.profileObj.imageUrl,\n      email: data.profileObj.email,\n      googleId: data.googleId\n    });\n  };\n\n  const responseFacebook = data => {\n    // console.log(data);\n    loginByFacebook({\n      token: data.accessToken,\n      name: data.name,\n      email: data.email,\n      facebookId: data.id,\n      thirdPartyAvatar: data.picture.data.url\n    });\n  };\n\n  const handlePress = event => {\n    const code = event.keyCode || event.which;\n\n    if (code === 13) {\n      //13 is the enter keycode\n      //Do stuff in here\n      submitForm(event);\n    }\n  };\n\n  useEffect(() => {\n    if (user) {\n      if (user.role > 0) {\n        router.push('/admin');\n      } else {\n        close();\n      }\n    }\n  }, [user]);\n  useEffect(() => {\n    if (loginByGoogleError) {\n      message.error(loginByGoogleError);\n    }\n  }, [loginByGoogleError]);\n  useEffect(() => {\n    if (loginByFacebookError) {\n      message.error(loginByFacebookError);\n    }\n  }, [loginByFacebookError]);\n  useEffect(() => {\n    if (loginUserError) {\n      setWaiting(false);\n\n      if (loginUserError.includes('Sai mật khẩu')) {\n        setForm(_objectSpread(_objectSpread({}, form), {}, {\n          formdata: _objectSpread(_objectSpread({}, form.formdata), {}, {\n            password: _objectSpread(_objectSpread({}, form.formdata.password), {}, {\n              valid: false,\n              validationMessage: 'Sai mật khẩu'\n            })\n          })\n        }));\n      } else if (loginUserError.includes('Không tìm thấy người dùng')) {\n        setForm(_objectSpread(_objectSpread({}, form), {}, {\n          formdata: _objectSpread(_objectSpread({}, form.formdata), {}, {\n            email: _objectSpread(_objectSpread({}, form.formdata.email), {}, {\n              valid: false,\n              validationMessage: 'Không tìm thấy người dùng'\n            })\n          })\n        }));\n      } else if (loginUserError.includes('Không thể đăng nhập bằng cách này')) {\n        message.error('Email này không thể đăng nhập bằng cách này');\n      } else {\n        message.error(loginUserError);\n      }\n    }\n  }, [loginUserError]);\n  return __jsx(\"div\", {\n    className: styles.loginWrapper\n  }, __jsx(\"div\", {\n    className: styles.title\n  }, \"\\u0110\\u0102NG NH\\u1EACP\"), __jsx(\"form\", {\n    onSubmit: event => submitForm(event)\n  }, __jsx(FormField, {\n    id: 'email',\n    formdata: form.formdata.email,\n    change: e => updateForm(e),\n    Prefix: userIcon,\n    press: e => handlePress(e)\n  }), __jsx(FormField, {\n    id: 'password',\n    formdata: form.formdata.password,\n    change: e => updateForm(e),\n    Prefix: passwordIcon,\n    press: e => handlePress(e)\n  }), form.formError && __jsx(\"div\", {\n    className: styles.errorLabel\n  }, \"Ki\\u1EC3m tra l\\u1EA1i th\\xF4ng tin\"), waiting && __jsx(\"div\", {\n    className: styles.waiting\n  }, __jsx(CircularProgress, {\n    className: styles.waitingIcon\n  })), __jsx(Button, {\n    onClick: event => submitForm(event),\n    style: {\n      backgroundColor: '#e91e63'\n    },\n    className: styles.button,\n    size: \"large\",\n    type: \"submit\"\n  }, \"X\\xE1c nh\\u1EADn\")), __jsx(\"div\", {\n    className: styles.thirdAuthen\n  }, __jsx(GoogleLogin, {\n    clientId: \"374918945235-8gdpha6da5h9sqva4mgi53ldreces79b.apps.googleusercontent.com\",\n    render: renderProps => __jsx(\"div\", {\n      className: styles.item,\n      onClick: renderProps.onClick\n    }, __jsx(\"div\", {\n      className: styles.icon\n    }, __jsx(\"img\", {\n      src: \"/icons/google.svg\",\n      alt: \"google\"\n    })), __jsx(\"div\", {\n      className: styles.text\n    }, \"\\u0110\\u0103ng nh\\u1EADp b\\u1EB1ng Google\")),\n    buttonText: \"Login\",\n    onSuccess: responseGoogle,\n    onFailure: responseGoogle,\n    cookiePolicy: 'single_host_origin'\n  }), __jsx(FacebookLogin, {\n    appId: \"659986671317584\" // autoLoad\n    ,\n    fields: \"name,email,picture,id\",\n    callback: responseFacebook,\n    render: renderProps => __jsx(\"div\", {\n      className: styles.item,\n      onClick: renderProps.onClick\n    }, __jsx(\"div\", {\n      className: styles.icon\n    }, __jsx(\"img\", {\n      src: \"/icons/facebook.svg\",\n      alt: \"facebook\"\n    })), __jsx(\"div\", {\n      className: styles.text\n    }, \"\\u0110\\u0103ng nh\\u1EADp b\\u1EB1ng Facebook\"))\n  })), __jsx(\"div\", {\n    className: styles.close,\n    onClick: close\n  }, __jsx(\"img\", {\n    src: \"/icons/close.svg\",\n    alt: \"close\"\n  })));\n}\n\nconst mapStateToProps = state => ({\n  user: state.users.data,\n  loginByGoogleError: state.users.loginByGoogleError,\n  loginByFacebookError: state.users.loginByFacebookError,\n  loginUserError: state.users.loginUserError\n});\n\nexport default connect(mapStateToProps, {\n  loginUser,\n  loginByGoogle,\n  loginByFacebook\n})(Login);","map":null,"metadata":{},"sourceType":"module"}