{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './AdminUser.module.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Table, Tag, Space, Popconfirm, message } from 'antd';\nimport TopAdminTable from '../TopAdminTable';\nimport Modal from 'react-modal';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport FormField from '../FormField';\nimport { update, generateData, isFormValid } from 'components/utils/formAction';\nimport Button from '@material-ui/core/Button';\nimport { createUserByAdmin, editUser, deleteUser, getUsers } from 'redux/actions/admins';\nModal.setAppElement('body');\nvar customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    width: '25rem'\n  }\n};\n\nfunction AdminUsers(_ref) {\n  var getUsers = _ref.getUsers,\n      users = _ref.users,\n      createUserByAdmin = _ref.createUserByAdmin,\n      createUserError = _ref.createUserError,\n      deleteUser = _ref.deleteUser,\n      deleteUserError = _ref.deleteUserError,\n      editUser = _ref.editUser,\n      editUserError = _ref.editUserError,\n      getUsersError = _ref.getUsersError;\n  var initialForm = {\n    formError: false,\n    formMessage: '',\n    formdata: {\n      email: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'email_input',\n          type: 'email',\n          // placeholder: 'Email',\n          label: 'Email'\n        },\n        validation: {\n          required: true,\n          email: true\n        },\n        valid: false,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      },\n      name: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'name_input',\n          type: 'name',\n          label: 'Tên'\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      },\n      role: {\n        element: 'select',\n        value: 'Quản trị viên',\n        config: {\n          name: 'role_input',\n          type: 'name',\n          label: 'Vai trò',\n          options: [{\n            value: 'Người dùng'\n          }, {\n            value: 'Quản trị viên'\n          }]\n        },\n        validation: {\n          required: true\n        },\n        valid: true,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      },\n      password: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'password_input',\n          type: 'password',\n          label: 'Mật khẩu'\n        },\n        validation: {\n          required: true,\n          password: true\n        },\n        valid: false,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      },\n      confirmPassword: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'confirm_password_input',\n          type: 'password',\n          // placeholder: 'Mật khẩu',\n          label: 'Nhập lại mật khẩu'\n        },\n        validation: {\n          required: true,\n          confirm: 'password'\n        },\n        valid: false,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      }\n    }\n  };\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      openModal = _useState2[0],\n      setOpenModal = _useState2[1];\n\n  var _useState3 = useState(initialForm),\n      form = _useState3[0],\n      setForm = _useState3[1];\n\n  var _useState4 = useState(false),\n      isWaiting = _useState4[0],\n      setWaiting = _useState4[1];\n\n  var _useState5 = useState({\n    active: false,\n    id: 'none'\n  }),\n      edit = _useState5[0],\n      setEdit = _useState5[1];\n\n  var columns = [{\n    title: 'Tên',\n    dataIndex: 'name',\n    key: 'name'\n  }, {\n    title: 'Email',\n    dataIndex: 'email',\n    key: 'email'\n  }, {\n    title: 'Vai trò',\n    dataIndex: 'role',\n    key: 'role',\n    render: function render(role) {\n      if (role === 2) {\n        return __jsx(Tag, {\n          color: \"red\"\n        }, \"Ch\\u1EE7 s\\u1EDF h\\u1EEFu\");\n      } else if (role === 1) {\n        return __jsx(Tag, {\n          color: \"orange\"\n        }, \"Qu\\u1EA3n tr\\u1ECB vi\\xEAn\");\n      } else {\n        return __jsx(Tag, {\n          color: \"green\"\n        }, \"Ngu\\u1EDDi d\\xF9ng\");\n      }\n    }\n  }, {\n    title: 'Hành động',\n    key: 'action',\n    render: function render(record) {\n      return __jsx(Space, {\n        size: \"middle\"\n      }, record.role !== 2 && __jsx(\"a\", {\n        onClick: function onClick() {\n          return handleEditUser(record._id);\n        }\n      }, \"S\\u1EEDa\"), record.role !== 2 && __jsx(Popconfirm, {\n        title: \"B\\u1EA1n c\\xF3 mu\\u1ED1n x\\xF3a ng\\u01B0\\u1EDDi d\\xF9ng n\\xE0y?\",\n        onConfirm: function onConfirm() {\n          return confirm(record._id);\n        },\n        okText: \"X\\xF3a\",\n        cancelText: \"Kh\\xF4ng\"\n      }, __jsx(\"a\", null, \"X\\xF3a\")));\n    }\n  }];\n\n  function confirm(id) {\n    deleteUser({\n      id: id\n    });\n  }\n\n  var selectUserRole = function selectUserRole(role) {\n    if (role === 0) {\n      return 'Người dùng';\n    } else if (role === 1) {\n      return 'Quản trị viên';\n    } else {\n      return 'Chủ sở hữu';\n    }\n  };\n\n  var handleEditUser = function handleEditUser(id) {\n    var usersArr = Object.values(users);\n    var selectedUser = usersArr.find(function (user) {\n      return user._id === id;\n    });\n    setEdit({\n      active: true,\n      id: selectedUser._id\n    });\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      formdata: _objectSpread(_objectSpread({}, form.formdata), {}, {\n        email: _objectSpread(_objectSpread({}, form.formdata.email), {}, {\n          value: selectedUser.email,\n          valid: true\n        }),\n        name: _objectSpread(_objectSpread({}, form.formdata.name), {}, {\n          value: selectedUser.name,\n          valid: true\n        }),\n        role: _objectSpread(_objectSpread({}, form.formdata.role), {}, {\n          value: selectUserRole(selectedUser.role),\n          valid: true\n        }),\n        password: _objectSpread(_objectSpread({}, form.formdata.password), {}, {\n          valid: true\n        })\n      })\n    }));\n    setOpenModal(true);\n  };\n\n  var handleCreate = function handleCreate() {\n    setEdit({\n      active: false,\n      id: 'none'\n    });\n    setForm(initialForm);\n    setOpenModal(true);\n  };\n\n  var closeModal = function closeModal() {\n    setOpenModal(false);\n    setForm(initialForm);\n  };\n\n  var updateForm = function updateForm(element) {\n    var newFormdata = update(element, form.formdata, 'admin_register');\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      formError: false,\n      formdata: newFormdata\n    }));\n  };\n\n  var submitForm = function submitForm(e) {\n    e.preventDefault();\n    var dataToSubmit = generateData(form.formdata, 'admin_register');\n    var formIsValid = isFormValid(form.formdata, 'admin_register');\n\n    if (formIsValid) {\n      if (edit.active) {\n        editUser({\n          id: edit.id,\n          fields: dataToSubmit\n        });\n      } else {\n        createUserByAdmin(dataToSubmit);\n      }\n\n      setWaiting(true);\n    } else {\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        formError: true,\n        formMessage: 'Kiểm tra lại thông tin'\n      }));\n    }\n  };\n\n  useEffect(function () {\n    getUsers();\n  }, []);\n  useEffect(function () {\n    if (deleteUserError) {\n      message.error('Xóa thất bại');\n    }\n\n    if (editUserError) {\n      message.error('Sửa thất bại');\n    }\n\n    if (getUsersError) {\n      message.error('Lấy người dùng thất bại');\n    }\n  }, [deleteUserError, editUserError, getUsersError]);\n  useEffect(function () {\n    if (users !== undefined) {\n      setLoading(false);\n      setWaiting(false);\n      setOpenModal(false);\n    }\n  }, [users]);\n  useEffect(function () {\n    if (createUserError === 'Email đã tồn tại') {\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        formdata: _objectSpread(_objectSpread({}, form.formdata), {}, {\n          email: _objectSpread(_objectSpread({}, form.formdata.email), {}, {\n            valid: false,\n            validationMessage: createUserError\n          })\n        })\n      }));\n      setWaiting(false);\n    } else {\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        formError: true,\n        formMessage: createUserError\n      }));\n    }\n  }, [createUserError]);\n\n  if (loading) {\n    return __jsx(\"div\", {\n      className: styles.loading\n    }, __jsx(CircularProgress, {\n      size: 50,\n      thickness: 4\n    }));\n  } else {\n    var usersArr = Object.values(users);\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: styles.tableWrapper\n    }, __jsx(\"div\", {\n      className: styles.topWrapper\n    }, __jsx(TopAdminTable, {\n      handleCreate: handleCreate\n    })), __jsx(\"div\", {\n      className: styles.table\n    }, __jsx(Table, {\n      columns: columns,\n      dataSource: usersArr,\n      rowKey: function rowKey(record) {\n        return record._id;\n      }\n    }))), __jsx(Modal, {\n      isOpen: openModal,\n      onRequestClose: closeModal,\n      style: customStyles,\n      contentLabel: \"Example Modal\",\n      shouldCloseOnOverlayClick: false\n    }, __jsx(\"div\", {\n      className: styles.modalTitle\n    }, edit.active ? 'Sửa người dùng' : 'Thêm người dùng'), __jsx(\"form\", {\n      className: styles.form,\n      onSubmit: function onSubmit(event) {\n        return submitForm(event);\n      }\n    }, __jsx(FormField, {\n      id: 'email',\n      formdata: form.formdata.email,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), __jsx(FormField, {\n      id: 'name',\n      formdata: form.formdata.name,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), __jsx(FormField, {\n      id: 'role',\n      formdata: form.formdata.role,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), __jsx(FormField, {\n      id: 'password',\n      formdata: form.formdata.password,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), __jsx(FormField, {\n      id: 'confirmPassword',\n      formdata: form.formdata.confirmPassword,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), form.formError && __jsx(\"div\", {\n      className: styles.errorLabel\n    }, form.formMessage), isWaiting && __jsx(\"div\", {\n      className: styles.waiting\n    }, __jsx(CircularProgress, {\n      color: \"secondary\"\n    })), __jsx(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: styles.button,\n      onClick: function onClick(event) {\n        return submitForm(event);\n      }\n    }, edit.active ? 'Sửa' : 'Đăng ký')), __jsx(\"div\", {\n      className: styles.close\n    }, __jsx(CancelIcon, {\n      color: \"secondary\",\n      style: {\n        cursor: 'pointer'\n      },\n      onClick: closeModal\n    }))));\n  }\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    users: state.admins.data,\n    createUserError: state.admins.createUserError,\n    deleteUserError: state.admins.deleteUserError,\n    editUserError: state.admins.editUserError,\n    getUsersError: state.admins.getUsersError\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getUsers: getUsers,\n  createUserByAdmin: createUserByAdmin,\n  deleteUser: deleteUser,\n  editUser: editUser\n})(AdminUsers);","map":null,"metadata":{},"sourceType":"module"}