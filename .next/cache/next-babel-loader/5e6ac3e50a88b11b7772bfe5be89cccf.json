{"ast":null,"code":"import { takeLatest, takeEvery, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/products';\nimport * as api from '../api/products';\n\nfunction* getProductsByAdmin() {\n  try {\n    const items = yield call(api.getProductsByAdmin); // console.log(items);\n\n    yield put(actions.getProductsByAdminSuccess({\n      items: items.data.products\n    }));\n  } catch (error) {\n    yield put(actions.getProductsByAdminError({\n      error: 'Lấy sản phẩm thất bại'\n    }));\n  }\n}\n\nfunction* watchGetProductsByAdminRequest() {\n  yield takeEvery(actions.Types.GET_PRODUCTS_BY_ADMIN, getProductsByAdmin);\n}\n\nfunction* createProductByAdmin({\n  payload\n}) {\n  try {\n    yield call(api.createProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    const errorData = error.response.data;\n\n    if (errorData.error.includes('E11000')) {\n      yield put(actions.createProductError({\n        error: 'Tên sản phẩm đã tồn tại'\n      }));\n    } else {\n      yield put(actions.createProductError({\n        error: 'Tạo sản phẩm thất bại'\n      }));\n    }\n  }\n}\n\nfunction* watchCreateProductByAdminRequest() {\n  yield takeLatest(actions.Types.CREATE_PRODUCT, createProductByAdmin);\n}\n\nfunction* deleteProduct(payload) {\n  try {\n    yield call(api.deleteProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (e) {\n    yield put(actions.deleteProductError({\n      error: 'Xóa thất bại'\n    }));\n  }\n}\n\nfunction* watchDeleteProductRequest() {\n  while (true) {\n    const {\n      payload\n    } = yield take(actions.Types.DELETE_PRODUCT);\n    yield call(deleteProduct, payload);\n  }\n}\n\nfunction* handleUpdatePublishProduct({\n  payload\n}) {\n  try {\n    yield call(api.updatePublishProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updatePublishProductError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdatePublishProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_PUBLISH_PRODUCT, handleUpdatePublishProduct);\n}\n\nfunction* handleUpdateAvailableProduct({\n  payload\n}) {\n  try {\n    yield call(api.updateAvailableProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updateAvailableProductError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateAvailableProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_AVAILABLE, handleUpdateAvailableProduct);\n}\n\nfunction* handleUpdateProductRequest({\n  payload\n}) {\n  try {\n    yield call(api.updateProduct, payload);\n    yield call(getProductsByAdmin);\n  } catch (error) {\n    yield put(actions.updateProductError({\n      error: 'Cập nhật thất bại'\n    }));\n  }\n}\n\nfunction* watchUpdateProductRequest() {\n  yield takeLatest(actions.Types.UPDATE_PRODUCT, handleUpdateProductRequest);\n}\n\nconst productSagas = [fork(watchGetProductsByAdminRequest), fork(watchCreateProductByAdminRequest), fork(watchDeleteProductRequest), fork(watchUpdatePublishProductRequest), fork(watchUpdateAvailableProductRequest), fork(watchUpdateProductRequest)];\nexport default productSagas;","map":null,"metadata":{},"sourceType":"module"}