{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getUser } from 'redux/actions/users';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { withRouter } from 'next/router';\n\nconst antIcon = __jsx(LoadingOutlined, {\n  style: {\n    fontSize: 50\n  },\n  spin: true\n});\n\nexport default function Auth(ComposedClass, adminRoute = false) {\n  class AuthenticationCheck extends Component {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"state\", {\n        loading: true\n      });\n    }\n\n    componentDidMount() {\n      const {\n        getUser\n      } = this.props;\n      getUser();\n    }\n\n    componentDidUpdate() {\n      const {\n        user,\n        router,\n        getUserError\n      } = this.props;\n      const {\n        loading\n      } = this.state; // console.log(getUserError);\n\n      if (getUserError) {\n        router.push('/');\n      }\n\n      if (adminRoute && loading && user) {\n        if (user.role < 1) {\n          router.push('/');\n        } else {\n          return this.setState({\n            loading: false\n          });\n        }\n      } else if (!adminRoute && loading && user) {\n        return this.setState({\n          loading: false\n        });\n      }\n    }\n\n    render() {\n      const {\n        user\n      } = this.props;\n      const {\n        loading\n      } = this.state;\n\n      if (loading) {\n        return __jsx(\"div\", {\n          style: {\n            width: '100%',\n            marginTop: '10em',\n            textAlign: 'center'\n          }\n        }, __jsx(Spin, {\n          indicator: antIcon\n        }));\n      }\n\n      return __jsx(ComposedClass, _extends({}, this.props, {\n        user: user\n      }));\n    }\n\n  }\n\n  function mapStateToProps(state) {\n    return {\n      user: state.users.data,\n      getUserError: state.users.getUserError\n    };\n  }\n\n  return connect(mapStateToProps, {\n    getUser\n  })(withRouter(AuthenticationCheck));\n}","map":null,"metadata":{},"sourceType":"module"}