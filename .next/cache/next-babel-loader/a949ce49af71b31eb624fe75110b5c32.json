{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef } from 'react';\nimport styles from './ChatBubble.module.scss';\nimport { connect } from 'react-redux';\nimport { toggleChatBubble } from 'redux/actions/ui';\nimport { toggleRegisterLogin } from 'redux/actions/ui';\nimport ChatWindow from '../ChatWindow'; // @ts-ignore\n\nimport io from 'socket.io-client';\nimport scrollToBottom from 'components/utils/scrollBottom';\nimport { message } from 'antd';\nimport axios from 'config/axios';\n\nfunction ChatBubble(_ref) {\n  _s();\n\n  var openChatBubble = _ref.openChatBubble,\n      toggleChatBubble = _ref.toggleChatBubble,\n      user = _ref.user,\n      toggleRegisterLogin = _ref.toggleRegisterLogin;\n\n  var _useState = useState([]),\n      messages = _useState[0],\n      setMessages = _useState[1];\n\n  var _useState2 = useState(false),\n      isOnline = _useState2[0],\n      setOnline = _useState2[1];\n\n  var socketRef = useRef();\n\n  var handleOpenChat = function handleOpenChat() {\n    toggleChatBubble(true);\n\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Set seen', {\n        user: 'Admin',\n        roomId: user._id\n      });\n    }\n  };\n\n  var handleCloseChat = function handleCloseChat() {\n    toggleChatBubble(false);\n  };\n\n  var handleOpenLogin = function handleOpenLogin() {\n    toggleRegisterLogin(true, 'login');\n  };\n\n  var handleSendMessage = function handleSendMessage(text) {\n    if (text) {\n      // @ts-ignore\n      socketRef.current.emit('Chat Message', {\n        data: {\n          roomId: user._id,\n          message: text,\n          sender: user.name,\n          type: 'text',\n          createdAt: Date.now(),\n          roomName: user.name\n        },\n        roomId: user._id\n      }); // @ts-ignore\n    }\n  };\n\n  useEffect(function () {\n    socketRef.current = io();\n\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Login', {\n        userId: user._id\n      }); // @ts-ignore\n\n      socketRef.current.emit('Join room', {\n        roomId: user._id\n      });\n\n      try {\n        axios.post('/messages', {\n          roomId: user._id\n        }).then(function (res) {\n          if (res.data.messages.length) {\n            setMessages(res.data.messages); // console.log(res.data.messages);\n          } else {\n            // @ts-ignore\n            socketRef.current.emit('Initialize Chat', {\n              roomId: user._id,\n              roomName: user.name\n            });\n          }\n        });\n      } catch (error) {\n        message.error(error.response.error);\n      } // @ts-ignore\n\n\n      socketRef.current.on('Chat Message', function (msg) {\n        // @ts-ignore\n        setMessages(function (oldMessages) {\n          return [].concat(_toConsumableArray(oldMessages), [msg]);\n        });\n      }); // @ts-ignore\n\n      socketRef.current.on('Chat Error', function (err) {\n        message.error(err.response);\n      }); // @ts-ignore\n\n      socketRef.current.on('Active Users', function (data) {\n        var dataArr = Object.values(data);\n\n        if (dataArr.includes('Admin')) {\n          setOnline(true);\n        } else {\n          setOnline(false);\n        }\n      }); // @ts-ignore\n\n      socketRef.current.on('Set Seen', function () {\n        axios.post('/messages', {\n          roomId: user._id\n        }).then(function (res) {\n          setMessages(res.data.messages);\n        });\n      });\n    } else {\n      toggleChatBubble(false);\n    }\n  }, [user]);\n\n  var handleSetSeen = function handleSetSeen() {\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Set seen', {\n        user: 'Admin',\n        roomId: user._id\n      });\n    }\n  };\n\n  useEffect(function () {\n    if (openChatBubble) {\n      scrollToBottom();\n    }\n  }, [messages, openChatBubble]);\n  return __jsx(React.Fragment, null, openChatBubble ? __jsx(ChatWindow, {\n    user: user,\n    handleOpenLogin: handleOpenLogin,\n    handleSendMessage: handleSendMessage,\n    handleCloseChat: handleCloseChat,\n    messages: messages,\n    isOnline: isOnline,\n    roomInfo: true,\n    handleClick: handleSetSeen\n  }) : __jsx(\"div\", {\n    className: styles.icon,\n    onClick: handleOpenChat\n  }, __jsx(\"img\", {\n    src: \"/icons/chat.svg\",\n    alt: \"chat\"\n  })));\n}\n\n_s(ChatBubble, \"/6o1n2tHTebxZ/VJNMaOOXW/RLM=\");\n\n_c = ChatBubble;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    openChatBubble: state.ui.openChatBubble,\n    user: state.users.data\n  };\n};\n\nexport default connect(mapStateToProps, {\n  toggleChatBubble: toggleChatBubble,\n  toggleRegisterLogin: toggleRegisterLogin\n})(ChatBubble);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBubble\");","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/components/ClientChatBubble/index.tsx"],"names":["React","useState","useEffect","useRef","styles","connect","toggleChatBubble","toggleRegisterLogin","ChatWindow","io","scrollToBottom","message","axios","ChatBubble","openChatBubble","user","messages","setMessages","isOnline","setOnline","socketRef","handleOpenChat","current","emit","roomId","_id","handleCloseChat","handleOpenLogin","handleSendMessage","text","data","sender","name","type","createdAt","Date","now","roomName","userId","post","then","res","length","error","response","on","msg","oldMessages","err","dataArr","Object","values","includes","handleSetSeen","icon","mapStateToProps","state","ui","users"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styles from './ChatBubble.module.scss';\nimport { connect } from 'react-redux';\nimport { toggleChatBubble } from 'redux/actions/ui';\nimport { toggleRegisterLogin } from 'redux/actions/ui';\nimport ChatWindow from '../ChatWindow';\n// @ts-ignore\nimport io from 'socket.io-client';\nimport scrollToBottom from 'components/utils/scrollBottom';\nimport { message } from 'antd';\nimport axios from 'config/axios';\n\nfunction ChatBubble({ openChatBubble, toggleChatBubble, user, toggleRegisterLogin }: any) {\n  const [messages, setMessages] = useState([]);\n  const [isOnline, setOnline] = useState(false);\n  const socketRef = useRef();\n\n  const handleOpenChat = () => {\n    toggleChatBubble(true);\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Set seen', { user: 'Admin', roomId: user._id });\n    }\n  };\n\n  const handleCloseChat = () => {\n    toggleChatBubble(false);\n  };\n\n  const handleOpenLogin = () => {\n    toggleRegisterLogin(true, 'login');\n  };\n\n  const handleSendMessage = (text: any) => {\n    if (text) {\n      // @ts-ignore\n      socketRef.current.emit('Chat Message', {\n        data: {\n          roomId: user._id,\n          message: text,\n          sender: user.name,\n          type: 'text',\n          createdAt: Date.now(),\n          roomName: user.name,\n        },\n        roomId: user._id,\n      });\n      // @ts-ignore\n    }\n  };\n\n  useEffect(() => {\n    socketRef.current = io();\n\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Login', { userId: user._id });\n      // @ts-ignore\n      socketRef.current.emit('Join room', { roomId: user._id });\n\n      try {\n        axios.post('/messages', { roomId: user._id }).then((res) => {\n          if (res.data.messages.length) {\n            setMessages(res.data.messages);\n            // console.log(res.data.messages);\n          } else {\n            // @ts-ignore\n            socketRef.current.emit('Initialize Chat', { roomId: user._id, roomName: user.name });\n          }\n        });\n      } catch (error) {\n        message.error(error.response.error);\n      }\n\n      // @ts-ignore\n      socketRef.current.on('Chat Message', (msg: any) => {\n        // @ts-ignore\n        setMessages((oldMessages) => [...oldMessages, msg]);\n      });\n      // @ts-ignore\n      socketRef.current.on('Chat Error', (err: any) => {\n        message.error(err.response);\n      });\n\n      // @ts-ignore\n      socketRef.current.on('Active Users', (data) => {\n        const dataArr = Object.values(data);\n        if (dataArr.includes('Admin')) {\n          setOnline(true);\n        } else {\n          setOnline(false);\n        }\n      });\n      // @ts-ignore\n      socketRef.current.on('Set Seen', () => {\n        axios.post('/messages', { roomId: user._id }).then((res) => {\n          setMessages(res.data.messages);\n        });\n      });\n    } else {\n      toggleChatBubble(false);\n    }\n  }, [user]);\n\n  const handleSetSeen = () => {\n    if (user) {\n      // @ts-ignore\n      socketRef.current.emit('Set seen', { user: 'Admin', roomId: user._id });\n    }\n  };\n\n  useEffect(() => {\n    if (openChatBubble) {\n      scrollToBottom();\n    }\n  }, [messages, openChatBubble]);\n\n  return (\n    <React.Fragment>\n      {openChatBubble ? (\n        <ChatWindow\n          user={user}\n          handleOpenLogin={handleOpenLogin}\n          handleSendMessage={handleSendMessage}\n          handleCloseChat={handleCloseChat}\n          messages={messages}\n          isOnline={isOnline}\n          roomInfo={true}\n          handleClick={handleSetSeen}\n        />\n      ) : (\n        <div className={styles.icon} onClick={handleOpenChat}>\n          <img src=\"/icons/chat.svg\" alt=\"chat\" />\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = (state: any) => ({\n  openChatBubble: state.ui.openChatBubble,\n  user: state.users.data,\n});\n\nexport default connect(mapStateToProps, { toggleChatBubble, toggleRegisterLogin })(ChatBubble);\n"]},"metadata":{},"sourceType":"module"}