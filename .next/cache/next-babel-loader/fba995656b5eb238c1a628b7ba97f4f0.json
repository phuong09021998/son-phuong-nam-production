{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n\nvar Formfield = function Formfield(_ref) {\n  var formdata = _ref.formdata,\n      change = _ref.change,\n      id = _ref.id,\n      Prefix = _ref.Prefix,\n      press = _ref.press;\n\n  var showError = function showError() {\n    var errorMessage = null;\n\n    if (formdata.validation && !formdata.valid) {\n      errorMessage = __jsx(\"span\", null, formdata.validationMessage);\n    }\n\n    return errorMessage;\n  };\n\n  var renderTemplate = function renderTemplate() {\n    var formTemplate = null;\n\n    switch (formdata.element) {\n      case 'input':\n        formTemplate = __jsx(\"div\", null, formdata.showlabel ? __jsx(\"p\", null, formdata.config.label) : null, Prefix && __jsx(Prefix, null), __jsx(\"input\", _extends({}, formdata.config, {\n          value: formdata.value,\n          onBlur: function onBlur(event) {\n            return change({\n              event: event,\n              id: id,\n              blur: true\n            });\n          },\n          onChange: function onChange(event) {\n            return change({\n              event: event,\n              id: id\n            });\n          },\n          autoComplete: \"off\",\n          onKeyPress: function onKeyPress(event) {\n            press ? press(event) : null;\n          }\n        })), showError());\n        break;\n\n      case 'select':\n        formTemplate = __jsx(\"div\", {\n          className: \"formBlock\"\n        }, formdata.showlabel ? __jsx(\"p\", null, formdata.config.label) : null, __jsx(\"select\", {\n          value: formdata.value,\n          onBlur: function onBlur(event) {\n            return change({\n              event: event,\n              id: id,\n              blur: true\n            });\n          },\n          onChange: function onChange(event) {\n            return change({\n              event: event,\n              id: id\n            });\n          }\n        }, formdata.config.options.map(function (item, i) {\n          return __jsx(\"option\", {\n            key: i,\n            value: item.key\n          }, item.value);\n        })), showError());\n        break;\n\n      case 'textarea':\n        formTemplate = __jsx(\"div\", {\n          className: \"formBlock\"\n        }, formdata.showlabel ? __jsx(\"div\", {\n          className: \"label_inputs\"\n        }, formdata.config.label) : null, __jsx(\"textarea\", _extends({}, formdata.config, {\n          value: formdata.value,\n          onBlur: function onBlur(event) {\n            return change({\n              event: event,\n              id: id,\n              blur: true\n            });\n          },\n          onChange: function onChange(event) {\n            return change({\n              event: event,\n              id: id\n            });\n          }\n        })), showError());\n        break;\n\n      case 'image':\n        var loadImage = function loadImage(event) {\n          var output = document.getElementById('output'); // @ts-ignore\n\n          output.src = URL.createObjectURL(event.target.files[0]); // @ts-ignore\n\n          output.onload = function () {\n            // @ts-ignore\n            URL.revokeObjectURL(output.src); // free memory\n          };\n        };\n\n        formTemplate = __jsx(\"div\", null, formdata.showlabel ? __jsx(\"p\", null, formdata.config.label) : null, __jsx(\"input\", _extends({}, formdata.config, {\n          autoComplete: \"off\",\n          accept: \"image/*\",\n          type: \"file\",\n          onChange: function onChange(event) {\n            loadImage(event);\n            change({\n              event: event,\n              id: id\n            });\n          }\n        })), showError(), __jsx(\"img\", {\n          id: \"output\"\n        }), typeof formdata.value === 'string' && formdata.value !== '' && __jsx(\"img\", {\n          src: formdata.value\n        }));\n        break;\n\n      case 'rich_text':\n        formTemplate = __jsx(\"div\", null, formdata.showlabel ? __jsx(\"p\", null, formdata.config.label) : null, __jsx(Editor, {\n          initialValue: formdata.value,\n          init: {\n            height: 500,\n            menubar: 'insert',\n            // images_upload_url: '/api/post/image',\n            image_title: true,\n            automatic_uploads: true,\n            file_picker_types: 'image',\n            plugins: ['advlist autolink lists link image charmap print preview anchor', 'searchreplace visualblocks code fullscreen', 'insertdatetime media table paste code help wordcount'],\n            toolbar: 'undo redo | formatselect | bold italic backcolor | \\\n                  alignleft aligncenter alignright alignjustify | \\\n                  bullist numlist outdent indent | removeformat | image |help',\n            // @ts-ignore\n            file_picker_callback: function file_picker_callback(cb, value, meta) {\n              var input = document.createElement('input');\n              input.setAttribute('type', 'file');\n              input.setAttribute('accept', 'image/*');\n              /*\n                  Note: In modern browsers input[type=\"file\"] is functional without\n                  even adding it to the DOM, but that might not be the case in some older\n                  or quirky browsers like IE, so you might want to add it to the DOM\n                  just in case, and visually hide it. And do not forget do remove it\n                  once you do not need it anymore.\n                */\n\n              input.onchange = function () {\n                // @ts-ignore\n                var file = this.files[0];\n                var reader = new FileReader();\n\n                reader.onload = function () {\n                  /*\n                      Note: Now we need to register the blob in TinyMCEs image blob\n                      registry. In the next release this part hopefully won't be\n                      necessary, as we are looking to handle it internally.\n                    */\n                  var id = 'blobid' + new Date().getTime(); // @ts-ignore\n\n                  var blobCache = tinymce.activeEditor.editorUpload.blobCache; // @ts-ignore\n\n                  var base64 = reader.result.split(',')[1];\n                  var blobInfo = blobCache.create(id, file, base64);\n                  blobCache.add(blobInfo);\n                  /* call the callback and populate the Title field with the file name */\n\n                  cb(blobInfo.blobUri(), {\n                    title: file.name\n                  });\n                };\n\n                reader.readAsDataURL(file);\n              };\n\n              input.click();\n            },\n            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n          },\n          onEditorChange: function onEditorChange(event) {\n            return change({\n              event: event,\n              id: id\n            });\n          }\n        }), showError());\n        break;\n\n      default:\n        formTemplate = null;\n    }\n\n    return formTemplate;\n  };\n\n  return __jsx(React.Fragment, null, renderTemplate());\n};\n\nexport default Formfield;","map":null,"metadata":{},"sourceType":"module"}