{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const validate = (element, formdata) => {\n  let error = [true, ''];\n\n  if (element.validation.email) {\n    const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n    const message = `${!valid ? 'Email không hợp lệ' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.confirm) {\n    const valid = element.value.trim() === formdata[element.validation.confirm].value;\n    const message = `${!valid ? 'Mật khẩu nhập lại không chính xác' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.password) {\n    const valid = element.value.length >= 6;\n    const message = `${!valid ? 'Mật khẩu phải lớn hơn 6 kí tự' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.required) {\n    let valid;\n\n    if (element.element !== 'image') {\n      valid = element.value.trim() !== '';\n    } else {\n      valid = element.value !== '';\n    }\n\n    const message = `${!valid ? 'Bạn phải nhập mục này' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  return error;\n}; // @ts-ignore\n\nexport const update = (element, formdata, formName) => {\n  const newFormdata = _objectSpread({}, formdata);\n\n  const newElement = _objectSpread({}, newFormdata[element.id]);\n\n  if (element.id === 'content') {\n    newElement.value = element.event;\n  } else if (element.id === 'image') {\n    newElement.value = element.event.target.files[0];\n  } else {\n    newElement.value = element.event.target.value;\n  }\n\n  if (element.blur || element.id === 'image' || element.id === 'content' || element.id === 'password') {\n    const validData = validate(newElement, formdata);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  }\n\n  newElement.touched = element.blur;\n  newFormdata[element.id] = newElement;\n  return newFormdata;\n}; // @ts-ignore\n\nexport const generateData = (formdata, formName) => {\n  const dataToSubmit = {};\n\n  const setType = name => {\n    if (name === 'Dự án') {\n      return 'project';\n    } else if (name === 'Dịch vụ') {\n      return 'service';\n    } else {\n      return 'info';\n    }\n  };\n\n  for (const key in formdata) {\n    if (key === 'role') {\n      dataToSubmit[key] = formdata[key].value === 'Quản trị viên' ? 1 : 0;\n    } else if (key === 'type') {\n      dataToSubmit[key] = setType(formdata[key].value);\n    } else if (key === 'image') {\n      if (typeof formdata[key].value === 'object') {\n        dataToSubmit[key] = formdata[key].value;\n      }\n    } else if (key !== 'confirmPassword') {\n      dataToSubmit[key] = formdata[key].value;\n    }\n  }\n\n  return dataToSubmit;\n}; // @ts-ignore\n\nexport const isFormValid = (formdata, formName) => {\n  let formIsValid = true;\n\n  for (const key in formdata) {\n    formIsValid = formdata[key].valid && formIsValid;\n  }\n\n  return formIsValid;\n};","map":{"version":3,"sources":["/media/robert/DATA/Work/web-project/phuong-nam/src-code/components/utils/formAction.ts"],"names":["validate","element","formdata","error","validation","email","valid","test","value","message","confirm","trim","password","length","required","update","formName","newFormdata","newElement","id","event","target","files","blur","validData","validationMessage","touched","generateData","dataToSubmit","setType","name","key","isFormValid","formIsValid"],"mappings":"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","sourcesContent":["interface FormElement {\n  element: string;\n  value: string;\n  config?: {\n    name?: string;\n    type?: string;\n    placeholder?: string;\n    label?: string;\n  };\n  validation: {\n    required?: boolean;\n    email?: boolean;\n    password?: boolean;\n    confirm?: string;\n  };\n  valid: boolean;\n  touched?: boolean;\n  validationMessage?: string;\n  showlabel?: boolean;\n}\n\ninterface Formdata {\n  [name: string]: FormElement;\n}\n\nexport const validate = (element: FormElement, formdata: Formdata) => {\n  let error = [true, ''];\n\n  if (element.validation.email) {\n    const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n    const message = `${!valid ? 'Email không hợp lệ' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.confirm) {\n    const valid = element.value.trim() === formdata[element.validation.confirm].value;\n    const message = `${!valid ? 'Mật khẩu nhập lại không chính xác' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.password) {\n    const valid = element.value.length >= 6;\n    const message = `${!valid ? 'Mật khẩu phải lớn hơn 6 kí tự' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.required) {\n    let valid;\n    if (element.element !== 'image') {\n      valid = element.value.trim() !== '';\n    } else {\n      valid = element.value !== '';\n    }\n    const message = `${!valid ? 'Bạn phải nhập mục này' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  return error;\n};\n\n// @ts-ignore\nexport const update = (element: any, formdata: Formdata, formName: string) => {\n  const newFormdata: Formdata = {\n    ...formdata,\n  };\n  const newElement: FormElement = {\n    ...newFormdata[element.id],\n  };\n\n  if (element.id === 'content') {\n    newElement.value = element.event;\n  } else if (element.id === 'image') {\n    newElement.value = element.event.target.files[0];\n  } else {\n    newElement.value = element.event.target.value;\n  }\n\n  if (element.blur || element.id === 'image' || element.id === 'content' || element.id === 'password') {\n    const validData = validate(newElement, formdata);\n    newElement.valid = validData[0] as boolean;\n    newElement.validationMessage = validData[1] as string;\n  }\n\n  newElement.touched = element.blur;\n  newFormdata[element.id] = newElement;\n\n  return newFormdata;\n};\n\n// @ts-ignore\nexport const generateData = (formdata: Formdata, formName: string) => {\n  const dataToSubmit: any = {};\n\n  const setType = (name: string) => {\n    if (name === 'Dự án') {\n      return 'project';\n    } else if (name === 'Dịch vụ') {\n      return 'service';\n    } else {\n      return 'info';\n    }\n  };\n\n  for (const key in formdata) {\n    if (key === 'role') {\n      dataToSubmit[key] = formdata[key].value === 'Quản trị viên' ? 1 : 0;\n    } else if (key === 'type') {\n      dataToSubmit[key] = setType(formdata[key].value);\n    } else if (key === 'image') {\n      if (typeof formdata[key].value === 'object') {\n        dataToSubmit[key] = formdata[key].value;\n      }\n    } else if (key !== 'confirmPassword') {\n      dataToSubmit[key] = formdata[key].value;\n    }\n  }\n\n  return dataToSubmit;\n};\n\n// @ts-ignore\nexport const isFormValid = (formdata: Formdata, formName: string) => {\n  let formIsValid = true;\n\n  for (const key in formdata) {\n    formIsValid = (formdata[key].valid && formIsValid) as boolean;\n  }\n  return formIsValid;\n};\n"]},"metadata":{},"sourceType":"module"}