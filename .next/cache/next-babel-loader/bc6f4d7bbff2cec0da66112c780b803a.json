{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getPostsByAdmin } from 'redux/actions/posts';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport styles from './AdminPosts.module.scss';\nimport TopAdminTable from '../TopAdminTable';\nimport { Table, Tag, Space, Popconfirm, message, Switch } from 'antd';\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\nimport FormField from '../FormField';\nimport Button from '@material-ui/core/Button';\nimport { update, generateData, isFormValid } from 'components/utils/formAction';\nimport { createPost, deletePost, updatePublish, updatePost } from 'redux/actions/posts';\n\nfunction AdminPosts(_ref) {\n  var posts = _ref.posts,\n      getPostsByAdmin = _ref.getPostsByAdmin,\n      createPost = _ref.createPost,\n      deletePost = _ref.deletePost,\n      getPostsError = _ref.getPostsError,\n      createPostError = _ref.createPostError,\n      deletePostError = _ref.deletePostError,\n      updatePublish = _ref.updatePublish,\n      updatePost = _ref.updatePost,\n      updatePublishError = _ref.updatePublishError,\n      updatePostError = _ref.updatePostError;\n  var initialForm = {\n    formError: false,\n    formMessage: '',\n    formdata: {\n      title: {\n        element: 'input',\n        value: '',\n        config: {\n          name: 'title_input',\n          type: 'title',\n          // placeholder: 'Email',\n          label: 'Tiêu đề'\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      },\n      type: {\n        element: 'select',\n        value: 'Dự án',\n        config: {\n          name: 'type_input',\n          type: 'type',\n          label: 'Thể loại',\n          options: [{\n            value: 'Dự án'\n          }, {\n            value: 'Dịch vụ'\n          }, {\n            value: 'Kiến thức'\n          }]\n        },\n        validation: {\n          required: true\n        },\n        valid: true,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      },\n      image: {\n        element: 'image',\n        value: '',\n        config: {\n          label: 'Ảnh đại diện',\n          placeholder: ''\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        showlabel: true,\n        touched: true,\n        validationMessage: 'Bạn phải nhập mục này'\n      },\n      content: {\n        element: 'rich_text',\n        value: '',\n        config: {\n          name: 'content_input',\n          type: 'content',\n          // placeholder: 'Email',\n          label: 'Nội dung'\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        showlabel: true,\n        validationMessage: ''\n      }\n    }\n  };\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState({\n    active: false,\n    status: 'none'\n  }),\n      edit = _useState2[0],\n      setEdit = _useState2[1];\n\n  var _useState3 = useState(initialForm),\n      form = _useState3[0],\n      setForm = _useState3[1];\n\n  var _useState4 = useState(false),\n      isWaiting = _useState4[0],\n      setWaiting = _useState4[1];\n\n  var columns = [{\n    title: 'Tên bài viết',\n    dataIndex: 'title',\n    key: 'title'\n  }, {\n    title: 'Thể loại',\n    dataIndex: 'type',\n    key: 'type',\n    render: function render(type) {\n      if (type === 'info') {\n        return __jsx(Tag, {\n          color: \"green\"\n        }, \"Ki\\u1EBFn th\\u1EE9c\");\n      } else if (type === 'service') {\n        return __jsx(Tag, {\n          color: \"blue\"\n        }, \"D\\u1ECBch v\\u1EE5\");\n      } else {\n        return __jsx(Tag, {\n          color: \"orange\"\n        }, \"D\\u1EF1 \\xE1n \");\n      }\n    }\n  }, {\n    title: 'Xuất bản',\n    dataIndex: 'publish',\n    key: 'publish',\n    render: function render(publish, record) {\n      return __jsx(Switch, {\n        defaultChecked: publish,\n        checkedChildren: __jsx(CheckOutlined, null),\n        unCheckedChildren: __jsx(CloseOutlined, null),\n        onChange: function onChange(check) {\n          return handleSwitchChange(check, record._id);\n        }\n      });\n    }\n  }, {\n    title: 'Hành động',\n    key: 'action',\n    render: function render(record) {\n      return __jsx(Space, {\n        size: \"middle\"\n      }, __jsx(\"a\", {\n        onClick: function onClick(e) {\n          return handleEdit(e, record.urlTitle);\n        }\n      }, \"S\\u1EEDa\"), __jsx(Popconfirm, {\n        title: \"B\\u1EA1n c\\xF3 mu\\u1ED1n x\\xF3a b\\xE0i vi\\u1EBFt n\\xE0y?\",\n        onConfirm: function onConfirm() {\n          return handleDelete(record._id);\n        },\n        okText: \"X\\xF3a\",\n        cancelText: \"Kh\\xF4ng\"\n      }, __jsx(\"a\", null, \"X\\xF3a\")));\n    }\n  }]; // @ts-ignore\n\n  var handleEdit = function handleEdit(e, urlTitle) {\n    var postsArr = Object.values(posts);\n    var selectedPost = postsArr.find(function (post) {\n      return post.urlTitle === urlTitle;\n    });\n    setEdit({\n      active: true,\n      status: selectedPost._id\n    });\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      formdata: _objectSpread(_objectSpread({}, form.formdata), {}, {\n        title: _objectSpread(_objectSpread({}, form.formdata.title), {}, {\n          value: selectedPost.title,\n          valid: true\n        }),\n        type: _objectSpread(_objectSpread({}, form.formdata.type), {}, {\n          value: setType(selectedPost.type),\n          valid: true\n        }),\n        content: _objectSpread(_objectSpread({}, form.formdata.content), {}, {\n          value: selectedPost.content,\n          valid: true\n        }),\n        image: _objectSpread(_objectSpread({}, form.formdata.image), {}, {\n          value: \"/api/post/image/\".concat(urlTitle),\n          valid: true\n        })\n      })\n    }));\n  };\n\n  var setType = function setType(type) {\n    if (type === 'project') {\n      return 'Dự án';\n    } else if (type === 'service') {\n      return 'Dịch vụ';\n    } else {\n      return 'Kiến thức';\n    }\n  };\n\n  var handleSwitchChange = function handleSwitchChange(check, id) {\n    updatePublish({\n      publish: check,\n      id: id\n    });\n  };\n\n  var handleDelete = function handleDelete(id) {\n    deletePost({\n      id: id\n    });\n  };\n\n  var handleCreatePost = function handleCreatePost() {\n    setEdit({\n      active: true,\n      status: 'create'\n    });\n    setWaiting(false);\n    setForm(initialForm);\n  };\n\n  var updateForm = function updateForm(element) {\n    var newFormdata = update(element, form.formdata, 'posts');\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      formError: false,\n      formdata: newFormdata\n    }));\n  };\n\n  var submitForm = function submitForm(e) {\n    e.preventDefault();\n    var dataToSubmit = generateData(form.formdata, 'posts');\n    var formIsValid = isFormValid(form.formdata, 'posts');\n\n    if (formIsValid) {\n      setWaiting(true);\n\n      if (edit.active && edit.status === 'create') {\n        createPost(dataToSubmit);\n      } else {\n        updatePost(_objectSpread(_objectSpread({}, dataToSubmit), {}, {\n          id: edit.status\n        }));\n      }\n    } else {\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        formError: true,\n        formMessage: 'Kiểm tra lại thông tin'\n      }));\n    }\n  };\n\n  var exitForm = function exitForm(e) {\n    e.preventDefault();\n    setEdit({\n      active: false,\n      status: 'none'\n    });\n    setWaiting(false);\n  };\n\n  useEffect(function () {\n    getPostsByAdmin();\n  }, []);\n  useEffect(function () {\n    if (getPostsError) {\n      message.error(getPostsError);\n    }\n  }, [getPostsError]);\n  useEffect(function () {\n    if (deletePostError) {\n      message.error(deletePostError);\n    }\n  }, [deletePostError]);\n  useEffect(function () {\n    if (updatePublishError) {\n      message.error(updatePublishError);\n    }\n  }, [updatePublishError]);\n  useEffect(function () {\n    if (updatePostError) {\n      message.error(updatePostError);\n    }\n  }, [updatePostError]);\n  useEffect(function () {\n    if (createPostError) {\n      setWaiting(false);\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        formdata: _objectSpread(_objectSpread({}, form.formdata), {}, {\n          title: _objectSpread(_objectSpread({}, form.formdata.title), {}, {\n            valid: false,\n            validationMessage: 'Tên bài viết đã tồn tại'\n          })\n        })\n      }));\n    }\n  }, [createPostError]);\n  useEffect(function () {\n    if (posts) {\n      setLoading(false);\n      setWaiting(false);\n      setEdit({\n        active: false,\n        status: 'none'\n      });\n    }\n  }, [posts]);\n\n  if (loading) {\n    return __jsx(\"div\", {\n      className: styles.loading\n    }, __jsx(CircularProgress, {\n      size: 50,\n      thickness: 4\n    }));\n  } else if (edit.active) {\n    return __jsx(\"div\", {\n      className: styles.formContainer\n    }, __jsx(\"form\", null, __jsx(\"div\", {\n      className: styles.title,\n      onSubmit: function onSubmit(event) {\n        return submitForm(event);\n      }\n    }, edit.status === 'create' ? 'Thêm bài viết' : 'Sửa bài viết'), __jsx(FormField, {\n      id: 'title',\n      formdata: form.formdata.title,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), __jsx(FormField, {\n      id: 'type',\n      formdata: form.formdata.type,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), __jsx(FormField, {\n      id: 'image',\n      formdata: form.formdata.image,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), __jsx(FormField, {\n      id: 'content',\n      formdata: form.formdata.content,\n      change: function change(e) {\n        return updateForm(e);\n      }\n    }), form.formError && __jsx(\"div\", {\n      className: styles.errorLabel\n    }, form.formMessage), isWaiting && __jsx(\"div\", {\n      className: styles.waiting\n    }, __jsx(CircularProgress, {\n      color: \"secondary\"\n    })), __jsx(\"div\", {\n      className: styles.buttonWrapper\n    }, __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: styles.button,\n      onClick: function onClick(event) {\n        return exitForm(event);\n      }\n    }, \"H\\u1EE7y\"), __jsx(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: styles.button,\n      onClick: function onClick(event) {\n        return submitForm(event);\n      },\n      type: \"submit\"\n    }, \"X\\xE1c nh\\u1EADn\"))));\n  } else {\n    return __jsx(\"div\", {\n      className: styles.container\n    }, __jsx(\"div\", {\n      className: styles.topWrapper\n    }, __jsx(TopAdminTable, {\n      handleCreate: handleCreatePost\n    })), __jsx(\"div\", {\n      className: styles.tableWrapper\n    }, __jsx(Table, {\n      columns: columns,\n      dataSource: posts,\n      rowKey: function rowKey(record) {\n        return record._id;\n      }\n    })));\n  }\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    posts: state.posts.postsByAdmin,\n    getPostsError: state.posts.getPostsByAdminError,\n    createPostError: state.posts.createPostError,\n    deletePostError: state.posts.deletePostError,\n    updatePublishError: state.posts.updatePublishError,\n    updatePostError: state.posts.updatePostError\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getPostsByAdmin: getPostsByAdmin,\n  createPost: createPost,\n  deletePost: deletePost,\n  updatePublish: updatePublish,\n  updatePost: updatePost\n})(AdminPosts);","map":null,"metadata":{},"sourceType":"module"}