{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const validate = (element, formdata) => {\n  let error = [true, ''];\n\n  if (element.validation.email) {\n    const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n    const message = `${!valid ? 'Email không hợp lệ' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.confirm) {\n    const valid = element.value.trim() === formdata[element.validation.confirm].value;\n    const message = `${!valid ? 'Mật khẩu nhập lại không chính xác' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.password) {\n    const valid = element.value.length >= 6;\n    const message = `${!valid ? 'Mật khẩu phải lớn hơn 6 kí tự' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.required) {\n    let valid;\n\n    if (element.element !== 'image') {\n      valid = element.value.trim() !== '';\n    } else {\n      valid = element.value !== '';\n    }\n\n    const message = `${!valid ? 'Bạn phải nhập mục này' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  return error;\n}; // @ts-ignore\n\nexport const update = (element, formdata, formName) => {\n  const newFormdata = _objectSpread({}, formdata);\n\n  const newElement = _objectSpread({}, newFormdata[element.id]);\n\n  if (element.id === 'content') {\n    newElement.value = element.event;\n  } else if (element.id === 'image') {\n    newElement.value = element.event.target.files[0];\n  } else {\n    newElement.value = element.event.target.value;\n  }\n\n  if (element.blur || element.id === 'image' || element.id === 'content' || element.id === 'password') {\n    const validData = validate(newElement, formdata);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  }\n\n  newElement.touched = element.blur;\n  newFormdata[element.id] = newElement;\n  return newFormdata;\n}; // @ts-ignore\n\nexport const generateData = (formdata, formName) => {\n  const dataToSubmit = {};\n\n  const setType = name => {\n    if (name === 'Dự án') {\n      return 'project';\n    } else if (name === 'Dịch vụ') {\n      return 'service';\n    } else {\n      return 'info';\n    }\n  };\n\n  for (const key in formdata) {\n    if (key === 'role') {\n      dataToSubmit[key] = formdata[key].value === 'Quản trị viên' ? 1 : 0;\n    } else if (key === 'type') {\n      dataToSubmit[key] = setType(formdata[key].value);\n    } else if (key === 'image') {\n      if (typeof formdata[key].value === 'object') {\n        dataToSubmit[key] = formdata[key].value;\n      }\n    } else if (key !== 'confirmPassword') {\n      dataToSubmit[key] = formdata[key].value;\n    }\n  }\n\n  return dataToSubmit;\n}; // @ts-ignore\n\nexport const isFormValid = (formdata, formName) => {\n  let formIsValid = true;\n\n  for (const key in formdata) {\n    formIsValid = formdata[key].valid && formIsValid;\n  }\n\n  return formIsValid;\n};","map":null,"metadata":{},"sourceType":"module"}